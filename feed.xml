<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://jayesh0vasudeva.github.io/Learning-Iteratively/feed.xml" rel="self" type="application/atom+xml" /><link href="https://jayesh0vasudeva.github.io/Learning-Iteratively/" rel="alternate" type="text/html" /><updated>2020-09-04T07:04:19-05:00</updated><id>https://jayesh0vasudeva.github.io/Learning-Iteratively/feed.xml</id><title type="html">Learning-Iteratively</title><subtitle>A Series of Blog posts to share my learnings and insights during the Fast.ai course v4, hoping to help fellow learners. :)</subtitle><entry><title type="html">Captum Tutorial</title><link href="https://jayesh0vasudeva.github.io/Learning-Iteratively/2020/09/04/captum-tutorial.ipynb" rel="alternate" type="text/html" title="Captum Tutorial" /><published>2020-09-04T00:00:00-05:00</published><updated>2020-09-04T00:00:00-05:00</updated><id>https://jayesh0vasudeva.github.io/Learning-Iteratively/2020/09/04/captum-tutorial</id><content type="html" xml:base="https://jayesh0vasudeva.github.io/Learning-Iteratively/2020/09/04/captum-tutorial.ipynb">{
 &quot;cells&quot;: [
  {
   &quot;cell_type&quot;: &quot;markdown&quot;,
   &quot;metadata&quot;: {},
   &quot;source&quot;: [
    &quot;# Understanding Captum with CIFAR&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;markdown&quot;,
   &quot;metadata&quot;: {},
   &quot;source&quot;: [
    &quot;[Captum](https://captum.ai) is an open-source extensible library for model interpretability and explainability built on [PyTorch](https://pytorch.org).&lt;br&gt;\n&quot;,
    &quot;&lt;p align='center'&gt;\n&quot;,
    &quot;    &lt;img src='https://captum.ai/img/captum_logo.svg' width='200'/&gt;\n&quot;,
    &quot;    &lt;img src='https://miro.medium.com/max/1400/1*JupRAYk4Q2xyEBWVV4SNyg.jpeg' width='200'/&gt;\n&quot;,
    &quot;&lt;/p&gt;\n&quot;,
    &quot;&lt;!-- ![PyTorch](https://miro.medium.com/max/1400/1*JupRAYk4Q2xyEBWVV4SNyg.jpeg =100x) --&gt;\n&quot;,
    &quot;With the recent advancements in the Machine Learning there's a need to understand the working of the model in order to improve its performance and construct an explaination of the features learned, it is an active field of research as well as area of focus for practical applications across industries working with machine learning.\n&quot;,
    &quot;Also, as the model complexity increases consequently we observe a lack of transaparency which might introduce biasness in the system.&lt;br&gt;\n&quot;,
    &quot;Model Interpretability can also be used to provide explaination to questions that concern data ethicality, for example searching \&quot;beautiful skin\&quot; on google, results in \&quot;White-skinned Women\&quot;, if we were to train our model on data extracted from search enigines like google, bing, etc. our model is likely to associate beauty with white skin, which can be explained with methods like Integrated Gradients, DeepLift, etc.&lt;br&gt;\n&quot;,
    &quot;To study further about Data Ethics and biases in the datasets, click [here](https://github.com/fastai/fastbook/blob/master/03_ethics.ipynb)&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;markdown&quot;,
   &quot;metadata&quot;: {},
   &quot;source&quot;: [
    &quot;This is a code-first tutorial with fastai2(will be officially updated to fastai in July 2020), since fastai is built on PyTorch so I have defined a custom pipeline and learner in fastai and used captum for visualisation of features.&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;code&quot;,
   &quot;execution_count&quot;: 2,
   &quot;metadata&quot;: {},
   &quot;outputs&quot;: [],
   &quot;source&quot;: [
    &quot;from utils import *\n&quot;,
    &quot;from fastai2.vision.all import *&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;markdown&quot;,
   &quot;metadata&quot;: {},
   &quot;source&quot;: [
    &quot;&gt;Note: It's important to set a random seed manually in order to have uniformity, and also it's convenient to obtain the same set of random numbers in the form of an array or a tensor.&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;code&quot;,
   &quot;execution_count&quot;: 3,
   &quot;metadata&quot;: {},
   &quot;outputs&quot;: [
    {
     &quot;data&quot;: {
      &quot;text/plain&quot;: [
       &quot;&lt;torch._C.Generator at 0x7f01d27e5070&gt;&quot;
      ]
     },
     &quot;execution_count&quot;: 3,
     &quot;metadata&quot;: {},
     &quot;output_type&quot;: &quot;execute_result&quot;
    }
   ],
   &quot;source&quot;: [
    &quot;np.random.seed(42)\n&quot;,
    &quot;torch.manual_seed(42)&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;code&quot;,
   &quot;execution_count&quot;: 4,
   &quot;metadata&quot;: {},
   &quot;outputs&quot;: [],
   &quot;source&quot;: [
    &quot;path = untar_data(URLs.CIFAR)&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;code&quot;,
   &quot;execution_count&quot;: 5,
   &quot;metadata&quot;: {},
   &quot;outputs&quot;: [
    {
     &quot;name&quot;: &quot;stdout&quot;,
     &quot;output_type&quot;: &quot;stream&quot;,
     &quot;text&quot;: [
      &quot;\u001b[01;34m/home/jayesh0vasudeva/.fastai/data/cifar10\u001b[00m\n&quot;,
      &quot;├── \u001b[01;34mtest\u001b[00m\n&quot;,
      &quot;│   ├── \u001b[01;34mairplane\u001b[00m\n&quot;,
      &quot;│   ├── \u001b[01;34mautomobile\u001b[00m\n&quot;,
      &quot;│   ├── \u001b[01;34mbird\u001b[00m\n&quot;,
      &quot;│   ├── \u001b[01;34mcat\u001b[00m\n&quot;,
      &quot;│   ├── \u001b[01;34mdeer\u001b[00m\n&quot;,
      &quot;│   ├── \u001b[01;34mdog\u001b[00m\n&quot;,
      &quot;│   ├── \u001b[01;34mfrog\u001b[00m\n&quot;,
      &quot;│   ├── \u001b[01;34mhorse\u001b[00m\n&quot;,
      &quot;│   ├── \u001b[01;34mship\u001b[00m\n&quot;,
      &quot;│   └── \u001b[01;34mtruck\u001b[00m\n&quot;,
      &quot;└── \u001b[01;34mtrain\u001b[00m\n&quot;,
      &quot;    ├── \u001b[01;34mairplane\u001b[00m\n&quot;,
      &quot;    ├── \u001b[01;34mautomobile\u001b[00m\n&quot;,
      &quot;    ├── \u001b[01;34mbird\u001b[00m\n&quot;,
      &quot;    ├── \u001b[01;34mcat\u001b[00m\n&quot;,
      &quot;    ├── \u001b[01;34mdeer\u001b[00m\n&quot;,
      &quot;    ├── \u001b[01;34mdog\u001b[00m\n&quot;,
      &quot;    ├── \u001b[01;34mfrog\u001b[00m\n&quot;,
      &quot;    ├── \u001b[01;34mhorse\u001b[00m\n&quot;,
      &quot;    ├── \u001b[01;34mship\u001b[00m\n&quot;,
      &quot;    └── \u001b[01;34mtruck\u001b[00m\n&quot;,
      &quot;\n&quot;,
      &quot;22 directories\n&quot;
     ]
    }
   ],
   &quot;source&quot;: [
    &quot;!tree -d {path}&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;code&quot;,
   &quot;execution_count&quot;: 6,
   &quot;metadata&quot;: {},
   &quot;outputs&quot;: [],
   &quot;source&quot;: [
    &quot;#hide\n&quot;,
    &quot;path_train = path/'train'\n&quot;,
    &quot;path_test = path/'test'\n&quot;,
    &quot;\n&quot;,
    &quot;files = get_image_files(path_train)&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;code&quot;,
   &quot;execution_count&quot;: 7,
   &quot;metadata&quot;: {},
   &quot;outputs&quot;: [
    {
     &quot;data&quot;: {
      &quot;text/plain&quot;: [
       &quot;(#10) ['ship','frog','deer','airplane','bird','automobile','dog','horse','truck','cat']&quot;
      ]
     },
     &quot;execution_count&quot;: 7,
     &quot;metadata&quot;: {},
     &quot;output_type&quot;: &quot;execute_result&quot;
    }
   ],
   &quot;source&quot;: [
    &quot;classes = L(file.parent.stem for file in files).unique()\n&quot;,
    &quot;classes&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;code&quot;,
   &quot;execution_count&quot;: 8,
   &quot;metadata&quot;: {},
   &quot;outputs&quot;: [],
   &quot;source&quot;: [
    &quot;from matplotlib import pyplot as plt\n&quot;,
    &quot;\n&quot;,
    &quot;def imshow(img, save=False, name=None):\n&quot;,
    &quot;    plt.imshow(img)\n&quot;,
    &quot;    if save:\n&quot;,
    &quot;        plt.savefig(name)\n&quot;,
    &quot;    plt.show()&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;code&quot;,
   &quot;execution_count&quot;: 9,
   &quot;metadata&quot;: {},
   &quot;outputs&quot;: [],
   &quot;source&quot;: [
    &quot;import torch.nn as nn \n&quot;,
    &quot;import torch.nn.functional as F &quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;markdown&quot;,
   &quot;metadata&quot;: {},
   &quot;source&quot;: [
    &quot;The model consists of two 2D-convolutional layers and 3 Linear Layers, each convolutional layer is followed by a `MaxPool2d` layer, the obtained actiavtion map from the last layer is stretched into a vector. The vector produced are then passed onto the linear layer to obtain the probabilities of the classes.&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;code&quot;,
   &quot;execution_count&quot;: 10,
   &quot;metadata&quot;: {},
   &quot;outputs&quot;: [],
   &quot;source&quot;: [
    &quot;class Model(nn.Module):\n&quot;,
    &quot;    \n&quot;,
    &quot;    def __init__(self):\n&quot;,
    &quot;        super(Model, self).__init__()\n&quot;,
    &quot;        self.conv1 = nn.Conv2d(3, 6, 5)\n&quot;,
    &quot;        self.pool1 = nn.MaxPool2d(2,2)\n&quot;,
    &quot;        self.pool2 = nn.MaxPool2d(2,2)\n&quot;,
    &quot;        self.conv2 = nn.Conv2d(6, 15, 5)\n&quot;,
    &quot;        self.fc1 = nn.Linear(15*4*4, 120)\n&quot;,
    &quot;        self.fc2 = nn.Linear(120, 84)\n&quot;,
    &quot;        self.fc3 = nn.Linear(84, 10)\n&quot;,
    &quot;        self.relu1 = nn.ReLU()\n&quot;,
    &quot;        self.relu2 = nn.ReLU()\n&quot;,
    &quot;        self.relu3 = nn.ReLU()\n&quot;,
    &quot;        self.relu4 = nn.ReLU()\n&quot;,
    &quot;        \n&quot;,
    &quot;    def forward(self, x):\n&quot;,
    &quot;        x = self.pool1(self.relu1(self.conv1(x)))\n&quot;,
    &quot;        x = self.pool2(self.relu2(self.conv2(x)))\n&quot;,
    &quot;        x = x.view(-1, 15*4*4)\n&quot;,
    &quot;        x = self.relu3(self.fc1(x))\n&quot;,
    &quot;        x = self.relu4(self.fc2(x))\n&quot;,
    &quot;        x = self.fc3(x)\n&quot;,
    &quot;        return x\n&quot;,
    &quot;    \n&quot;,
    &quot;    \n&quot;,
    &quot;net = Model()&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;code&quot;,
   &quot;execution_count&quot;: 11,
   &quot;metadata&quot;: {},
   &quot;outputs&quot;: [
    {
     &quot;data&quot;: {
      &quot;text/plain&quot;: [
       &quot;Model(\n&quot;,
       &quot;  (conv1): Conv2d(3, 6, kernel_size=(5, 5), stride=(1, 1))\n&quot;,
       &quot;  (pool1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n&quot;,
       &quot;  (pool2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n&quot;,
       &quot;  (conv2): Conv2d(6, 15, kernel_size=(5, 5), stride=(1, 1))\n&quot;,
       &quot;  (fc1): Linear(in_features=240, out_features=120, bias=True)\n&quot;,
       &quot;  (fc2): Linear(in_features=120, out_features=84, bias=True)\n&quot;,
       &quot;  (fc3): Linear(in_features=84, out_features=10, bias=True)\n&quot;,
       &quot;  (relu1): ReLU()\n&quot;,
       &quot;  (relu2): ReLU()\n&quot;,
       &quot;  (relu3): ReLU()\n&quot;,
       &quot;  (relu4): ReLU()\n&quot;,
       &quot;)&quot;
      ]
     },
     &quot;execution_count&quot;: 11,
     &quot;metadata&quot;: {},
     &quot;output_type&quot;: &quot;execute_result&quot;
    }
   ],
   &quot;source&quot;: [
    &quot;#hide_input\n&quot;,
    &quot;net&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;code&quot;,
   &quot;execution_count&quot;: 12,
   &quot;metadata&quot;: {},
   &quot;outputs&quot;: [],
   &quot;source&quot;: [
    &quot;datablock = DataBlock(\n&quot;,
    &quot;                    blocks=(ImageBlock, CategoryBlock),\n&quot;,
    &quot;                    get_items=get_image_files,\n&quot;,
    &quot;                    splitter=RandomSplitter(valid_pct=0.2, seed=42),\n&quot;,
    &quot;                    get_y=parent_label,\n&quot;,
    &quot;                    item_tfms=Resize(28),\n&quot;,
    &quot;                    batch_tfms=aug_transforms()\n&quot;,
    &quot;)&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;code&quot;,
   &quot;execution_count&quot;: 13,
   &quot;metadata&quot;: {},
   &quot;outputs&quot;: [
    {
     &quot;data&quot;: {
      &quot;image/png&quot;: &quot;\n&quot;,
      &quot;text/plain&quot;: [
       &quot;&lt;Figure size 864x216 with 4 Axes&gt;&quot;
      ]
     },
     &quot;metadata&quot;: {
      &quot;needs_background&quot;: &quot;light&quot;
     },
     &quot;output_type&quot;: &quot;display_data&quot;
    }
   ],
   &quot;source&quot;: [
    &quot;dls = datablock.dataloaders(path_train, bs=64)\n&quot;,
    &quot;dls.train.show_batch(max_n=4, nrows=1)&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;code&quot;,
   &quot;execution_count&quot;: 14,
   &quot;metadata&quot;: {},
   &quot;outputs&quot;: [],
   &quot;source&quot;: [
    &quot;ind = 4\n&quot;,
    &quot;img, label = next(iter(dls.train))\n&quot;,
    &quot;# img = np.transpose(img[ind].squeeze().cpu().detach().numpy(), (1,2,0))&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;code&quot;,
   &quot;execution_count&quot;: 15,
   &quot;metadata&quot;: {},
   &quot;outputs&quot;: [
    {
     &quot;name&quot;: &quot;stdout&quot;,
     &quot;output_type&quot;: &quot;stream&quot;,
     &quot;text&quot;: [
      &quot;tensor(0)\n&quot;
     ]
    },
    {
     &quot;data&quot;: {
      &quot;image/png&quot;: &quot;\n&quot;,
      &quot;text/plain&quot;: [
       &quot;&lt;Figure size 432x288 with 1 Axes&gt;&quot;
      ]
     },
     &quot;metadata&quot;: {
      &quot;needs_background&quot;: &quot;light&quot;
     },
     &quot;output_type&quot;: &quot;display_data&quot;
    }
   ],
   &quot;source&quot;: [
    &quot;print(label[ind])\n&quot;,
    &quot;imshow(np.transpose(img[ind].squeeze().cpu().detach().numpy(), (1,2,0)))&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;code&quot;,
   &quot;execution_count&quot;: 16,
   &quot;metadata&quot;: {},
   &quot;outputs&quot;: [],
   &quot;source&quot;: [
    &quot;learner = Learner(dls, net, loss_func=nn.CrossEntropyLoss(), metrics=[accuracy])&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;code&quot;,
   &quot;execution_count&quot;: 17,
   &quot;metadata&quot;: {},
   &quot;outputs&quot;: [],
   &quot;source&quot;: [
    &quot;model_path = Path('models/captum_with_cifar.pth')\n&quot;,
    &quot;if(model_path.is_file()):\n&quot;,
    &quot;    learner = learner.load('captum_with_cifar')\n&quot;,
    &quot;else:\n&quot;,
    &quot;    print(\&quot;the model ain't available\&quot;)&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;code&quot;,
   &quot;execution_count&quot;: null,
   &quot;metadata&quot;: {},
   &quot;outputs&quot;: [
    {
     &quot;data&quot;: {
      &quot;text/html&quot;: [
       &quot;\n&quot;,
       &quot;    &lt;div&gt;\n&quot;,
       &quot;        &lt;style&gt;\n&quot;,
       &quot;            /* Turns off some styling */\n&quot;,
       &quot;            progress {\n&quot;,
       &quot;                /* gets rid of default border in Firefox and Opera. */\n&quot;,
       &quot;                border: none;\n&quot;,
       &quot;                /* Needs to be in here for Safari polyfill so background images work as expected. */\n&quot;,
       &quot;                background-size: auto;\n&quot;,
       &quot;            }\n&quot;,
       &quot;            .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n&quot;,
       &quot;                background: #F44336;\n&quot;,
       &quot;            }\n&quot;,
       &quot;        &lt;/style&gt;\n&quot;,
       &quot;      &lt;progress value='29' class='' max='30', style='width:300px; height:20px; vertical-align: middle;'&gt;&lt;/progress&gt;\n&quot;,
       &quot;      96.67% [29/30 21:13&lt;00:43]\n&quot;,
       &quot;    &lt;/div&gt;\n&quot;,
       &quot;    \n&quot;,
       &quot;&lt;table border=\&quot;1\&quot; class=\&quot;dataframe\&quot;&gt;\n&quot;,
       &quot;  &lt;thead&gt;\n&quot;,
       &quot;    &lt;tr style=\&quot;text-align: left;\&quot;&gt;\n&quot;,
       &quot;      &lt;th&gt;epoch&lt;/th&gt;\n&quot;,
       &quot;      &lt;th&gt;train_loss&lt;/th&gt;\n&quot;,
       &quot;      &lt;th&gt;valid_loss&lt;/th&gt;\n&quot;,
       &quot;      &lt;th&gt;accuracy&lt;/th&gt;\n&quot;,
       &quot;      &lt;th&gt;time&lt;/th&gt;\n&quot;,
       &quot;    &lt;/tr&gt;\n&quot;,
       &quot;  &lt;/thead&gt;\n&quot;,
       &quot;  &lt;tbody&gt;\n&quot;,
       &quot;    &lt;tr&gt;\n&quot;,
       &quot;      &lt;td&gt;0&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.066012&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.104123&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;0.616100&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;00:44&lt;/td&gt;\n&quot;,
       &quot;    &lt;/tr&gt;\n&quot;,
       &quot;    &lt;tr&gt;\n&quot;,
       &quot;      &lt;td&gt;1&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.091863&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.125392&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;0.603600&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;00:43&lt;/td&gt;\n&quot;,
       &quot;    &lt;/tr&gt;\n&quot;,
       &quot;    &lt;tr&gt;\n&quot;,
       &quot;      &lt;td&gt;2&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.101116&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.097657&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;0.619200&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;00:44&lt;/td&gt;\n&quot;,
       &quot;    &lt;/tr&gt;\n&quot;,
       &quot;    &lt;tr&gt;\n&quot;,
       &quot;      &lt;td&gt;3&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.099387&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.117531&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;0.609700&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;00:43&lt;/td&gt;\n&quot;,
       &quot;    &lt;/tr&gt;\n&quot;,
       &quot;    &lt;tr&gt;\n&quot;,
       &quot;      &lt;td&gt;4&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.105429&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.115222&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;0.609500&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;00:43&lt;/td&gt;\n&quot;,
       &quot;    &lt;/tr&gt;\n&quot;,
       &quot;    &lt;tr&gt;\n&quot;,
       &quot;      &lt;td&gt;5&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.104295&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.095076&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;0.620100&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;00:42&lt;/td&gt;\n&quot;,
       &quot;    &lt;/tr&gt;\n&quot;,
       &quot;    &lt;tr&gt;\n&quot;,
       &quot;      &lt;td&gt;6&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.102067&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.104189&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;0.616400&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;00:44&lt;/td&gt;\n&quot;,
       &quot;    &lt;/tr&gt;\n&quot;,
       &quot;    &lt;tr&gt;\n&quot;,
       &quot;      &lt;td&gt;7&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.110839&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.117669&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;0.610900&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;00:43&lt;/td&gt;\n&quot;,
       &quot;    &lt;/tr&gt;\n&quot;,
       &quot;    &lt;tr&gt;\n&quot;,
       &quot;      &lt;td&gt;8&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.095918&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.116252&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;0.609200&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;00:43&lt;/td&gt;\n&quot;,
       &quot;    &lt;/tr&gt;\n&quot;,
       &quot;    &lt;tr&gt;\n&quot;,
       &quot;      &lt;td&gt;9&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.088083&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.107244&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;0.611500&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;00:44&lt;/td&gt;\n&quot;,
       &quot;    &lt;/tr&gt;\n&quot;,
       &quot;    &lt;tr&gt;\n&quot;,
       &quot;      &lt;td&gt;10&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.081308&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.099444&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;0.613600&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;00:45&lt;/td&gt;\n&quot;,
       &quot;    &lt;/tr&gt;\n&quot;,
       &quot;    &lt;tr&gt;\n&quot;,
       &quot;      &lt;td&gt;11&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.063852&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.148774&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;0.602000&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;00:43&lt;/td&gt;\n&quot;,
       &quot;    &lt;/tr&gt;\n&quot;,
       &quot;    &lt;tr&gt;\n&quot;,
       &quot;      &lt;td&gt;12&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.114893&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.095030&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;0.615100&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;00:43&lt;/td&gt;\n&quot;,
       &quot;    &lt;/tr&gt;\n&quot;,
       &quot;    &lt;tr&gt;\n&quot;,
       &quot;      &lt;td&gt;13&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.091594&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.132204&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;0.603300&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;00:44&lt;/td&gt;\n&quot;,
       &quot;    &lt;/tr&gt;\n&quot;,
       &quot;    &lt;tr&gt;\n&quot;,
       &quot;      &lt;td&gt;14&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.074800&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.101566&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;0.609400&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;00:44&lt;/td&gt;\n&quot;,
       &quot;    &lt;/tr&gt;\n&quot;,
       &quot;    &lt;tr&gt;\n&quot;,
       &quot;      &lt;td&gt;15&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.067993&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.086318&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;0.621500&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;00:43&lt;/td&gt;\n&quot;,
       &quot;    &lt;/tr&gt;\n&quot;,
       &quot;    &lt;tr&gt;\n&quot;,
       &quot;      &lt;td&gt;16&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.070161&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.086616&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;0.616200&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;00:43&lt;/td&gt;\n&quot;,
       &quot;    &lt;/tr&gt;\n&quot;,
       &quot;    &lt;tr&gt;\n&quot;,
       &quot;      &lt;td&gt;17&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.060663&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.089107&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;0.614700&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;00:44&lt;/td&gt;\n&quot;,
       &quot;    &lt;/tr&gt;\n&quot;,
       &quot;    &lt;tr&gt;\n&quot;,
       &quot;      &lt;td&gt;18&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.055892&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.095152&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;0.614100&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;00:43&lt;/td&gt;\n&quot;,
       &quot;    &lt;/tr&gt;\n&quot;,
       &quot;    &lt;tr&gt;\n&quot;,
       &quot;      &lt;td&gt;19&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.054790&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.072029&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;0.621500&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;00:43&lt;/td&gt;\n&quot;,
       &quot;    &lt;/tr&gt;\n&quot;,
       &quot;    &lt;tr&gt;\n&quot;,
       &quot;      &lt;td&gt;20&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.058136&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.092185&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;0.620300&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;00:43&lt;/td&gt;\n&quot;,
       &quot;    &lt;/tr&gt;\n&quot;,
       &quot;    &lt;tr&gt;\n&quot;,
       &quot;      &lt;td&gt;21&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.051811&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.075153&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;0.623600&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;00:43&lt;/td&gt;\n&quot;,
       &quot;    &lt;/tr&gt;\n&quot;,
       &quot;    &lt;tr&gt;\n&quot;,
       &quot;      &lt;td&gt;22&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.047477&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.083195&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;0.622200&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;00:43&lt;/td&gt;\n&quot;,
       &quot;    &lt;/tr&gt;\n&quot;,
       &quot;    &lt;tr&gt;\n&quot;,
       &quot;      &lt;td&gt;23&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.044617&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.090426&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;0.619000&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;00:43&lt;/td&gt;\n&quot;,
       &quot;    &lt;/tr&gt;\n&quot;,
       &quot;    &lt;tr&gt;\n&quot;,
       &quot;      &lt;td&gt;24&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.040123&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.073733&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;0.624500&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;00:44&lt;/td&gt;\n&quot;,
       &quot;    &lt;/tr&gt;\n&quot;,
       &quot;    &lt;tr&gt;\n&quot;,
       &quot;      &lt;td&gt;25&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.026667&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.085043&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;0.622700&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;00:43&lt;/td&gt;\n&quot;,
       &quot;    &lt;/tr&gt;\n&quot;,
       &quot;    &lt;tr&gt;\n&quot;,
       &quot;      &lt;td&gt;26&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.033031&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.062216&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;0.628500&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;00:44&lt;/td&gt;\n&quot;,
       &quot;    &lt;/tr&gt;\n&quot;,
       &quot;    &lt;tr&gt;\n&quot;,
       &quot;      &lt;td&gt;27&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.046917&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.066909&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;0.627400&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;00:44&lt;/td&gt;\n&quot;,
       &quot;    &lt;/tr&gt;\n&quot;,
       &quot;    &lt;tr&gt;\n&quot;,
       &quot;      &lt;td&gt;28&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.044453&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;1.067554&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;0.626800&lt;/td&gt;\n&quot;,
       &quot;      &lt;td&gt;00:43&lt;/td&gt;\n&quot;,
       &quot;    &lt;/tr&gt;\n&quot;,
       &quot;  &lt;/tbody&gt;\n&quot;,
       &quot;&lt;/table&gt;&lt;p&gt;\n&quot;,
       &quot;\n&quot;,
       &quot;    &lt;div&gt;\n&quot;,
       &quot;        &lt;style&gt;\n&quot;,
       &quot;            /* Turns off some styling */\n&quot;,
       &quot;            progress {\n&quot;,
       &quot;                /* gets rid of default border in Firefox and Opera. */\n&quot;,
       &quot;                border: none;\n&quot;,
       &quot;                /* Needs to be in here for Safari polyfill so background images work as expected. */\n&quot;,
       &quot;                background-size: auto;\n&quot;,
       &quot;            }\n&quot;,
       &quot;            .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n&quot;,
       &quot;                background: #F44336;\n&quot;,
       &quot;            }\n&quot;,
       &quot;        &lt;/style&gt;\n&quot;,
       &quot;      &lt;progress value='332' class='' max='625', style='width:300px; height:20px; vertical-align: middle;'&gt;&lt;/progress&gt;\n&quot;,
       &quot;      53.12% [332/625 00:21&lt;00:18 1.0274]\n&quot;,
       &quot;    &lt;/div&gt;\n&quot;,
       &quot;    &quot;
      ],
      &quot;text/plain&quot;: [
       &quot;&lt;IPython.core.display.HTML object&gt;&quot;
      ]
     },
     &quot;metadata&quot;: {},
     &quot;output_type&quot;: &quot;display_data&quot;
    }
   ],
   &quot;source&quot;: [
    &quot;learner.fit_one_cycle(30, 2e-4)&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;code&quot;,
   &quot;execution_count&quot;: null,
   &quot;metadata&quot;: {},
   &quot;outputs&quot;: [],
   &quot;source&quot;: [
    &quot;!mkdir models&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;code&quot;,
   &quot;execution_count&quot;: null,
   &quot;metadata&quot;: {},
   &quot;outputs&quot;: [],
   &quot;source&quot;: [
    &quot;learner.save('captum_with_cifar')&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;code&quot;,
   &quot;execution_count&quot;: null,
   &quot;metadata&quot;: {},
   &quot;outputs&quot;: [],
   &quot;source&quot;: [
    &quot;from captum.attr import IntegratedGradients, Saliency\n&quot;,
    &quot;from captum.attr import DeepLift, NoiseTunnel\n&quot;,
    &quot;from captum.attr import visualization as viz&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;code&quot;,
   &quot;execution_count&quot;: null,
   &quot;metadata&quot;: {},
   &quot;outputs&quot;: [],
   &quot;source&quot;: [
    &quot;# from PIL import Image\n&quot;,
    &quot;# indx = 3\n&quot;,
    &quot;# img = Image.open(dls.train.items[indx])\n&quot;,
    &quot;# img = Tensor(np.array(img))\n&quot;,
    &quot;# label = dls.train.items[indx].parent.stem&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;code&quot;,
   &quot;execution_count&quot;: null,
   &quot;metadata&quot;: {},
   &quot;outputs&quot;: [],
   &quot;source&quot;: [
    &quot;input = img[ind].unsqueeze(0)\n&quot;,
    &quot;input.requires_grad = True&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;code&quot;,
   &quot;execution_count&quot;: null,
   &quot;metadata&quot;: {},
   &quot;outputs&quot;: [],
   &quot;source&quot;: [
    &quot;original_img = np.transpose(img[ind].squeeze().cpu().detach().numpy(), (1,2,0))\n&quot;,
    &quot;\n&quot;,
    &quot;_ = viz.visualize_image_attr(None, original_img, method='original_image', title='Original Image')&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;code&quot;,
   &quot;execution_count&quot;: null,
   &quot;metadata&quot;: {},
   &quot;outputs&quot;: [],
   &quot;source&quot;: [
    &quot;saliency = Saliency(net)\n&quot;,
    &quot;grads = saliency.attribute(input, target=label[ind].item())\n&quot;,
    &quot;grads = np.transpose(grads.squeeze().cpu().detach().numpy(), (1, 2, 0))\n&quot;,
    &quot;\n&quot;,
    &quot;_ = viz.visualize_image_attr(grads, original_img, show_colorbar=True,\n&quot;,
    &quot;                             method=\&quot;blended_heat_map\&quot;, sign=\&quot;absolute_value\&quot;, title=\&quot;Overlayed gradient magnitude\&quot;)&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;markdown&quot;,
   &quot;metadata&quot;: {},
   &quot;source&quot;: [
    &quot;Saliency Maps are a way to visualise the features learned by the model, it essentially depicts the contribution of each pixel in the image towards the classification score of a particular class, to learn more about saliency map click [here]().&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;code&quot;,
   &quot;execution_count&quot;: null,
   &quot;metadata&quot;: {},
   &quot;outputs&quot;: [],
   &quot;source&quot;: [
    &quot;grads = torch.from_numpy(grads)\n&quot;,
    &quot;grads, i = torch.max(grads.abs(), dim=2)&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;code&quot;,
   &quot;execution_count&quot;: null,
   &quot;metadata&quot;: {},
   &quot;outputs&quot;: [],
   &quot;source&quot;: [
    &quot;imshow(grads)&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;code&quot;,
   &quot;execution_count&quot;: null,
   &quot;metadata&quot;: {},
   &quot;outputs&quot;: [],
   &quot;source&quot;: [
    &quot;def attribute_image_features(algo, input, **kwargs):\n&quot;,
    &quot;    tensor_attributions = algo.attribute(input, \n&quot;,
    &quot;                                        target=label[ind].item(),\n&quot;,
    &quot;                                        **kwargs)\n&quot;,
    &quot;    return tensor_attributions&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;code&quot;,
   &quot;execution_count&quot;: null,
   &quot;metadata&quot;: {},
   &quot;outputs&quot;: [],
   &quot;source&quot;: [
    &quot;algo = IntegratedGradients(net)\n&quot;,
    &quot;attribute, delta = attribute_image_features(algo, input, baselines=input*0, return_convergence_delta=True)\n&quot;,
    &quot;attribute = np.transpose(attribute.squeeze().cpu().detach().numpy(), (1,2,0))\n&quot;,
    &quot;print('approximated delta : ', delta)&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;markdown&quot;,
   &quot;metadata&quot;: {},
   &quot;source&quot;: [
    &quot;## Integrated Gradients&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;markdown&quot;,
   &quot;metadata&quot;: {},
   &quot;source&quot;: [
    &quot;Before introducing integrated gradients we first need to understand the two fundamental axioms - sensitivity(and baseline value) and Implementation Variance &quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;markdown&quot;,
   &quot;metadata&quot;: {},
   &quot;source&quot;: [
    &quot;### Sensitivity and Baseline Value&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;markdown&quot;,
   &quot;metadata&quot;: {},
   &quot;source&quot;: [
    &quot;&gt; Note: We have assumed that Gradients of F(x) with respect to variable x tells us the importance of x in F(x) &lt;br&gt;&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;markdown&quot;,
   &quot;metadata&quot;: {},
   &quot;source&quot;: [
    &quot;Sensitivity can be defined as the change in the output observed by changing a single variable in the function, keeping the rest of them constant, this change obtained is called the attribution of that variable, or simply one can say for a function: h&lt;sub&gt;&amp;theta;&lt;/sub&gt;(x, y)= &amp;theta;&lt;sub&gt;0&lt;/sub&gt;x + &amp;theta;&lt;sub&gt;1&lt;/sub&gt;y\n&quot;,
    &quot;we assume a baseline of the variable x as x&lt;sub&gt;0&lt;/sub&gt; and we change x&lt;sub&gt;0&lt;/sub&gt; to x&lt;sub&gt;1&lt;/sub&gt; \n&quot;,
    &quot;the change or difference obtained observed is : &lt;br&gt;\n&quot;,
    &quot;&lt;div align='center'&gt;\n&quot;,
    &quot;h&lt;sub&gt;&amp;theta;&lt;/sub&gt;(x&lt;sub&gt;0&lt;/sub&gt;, y) - h&lt;sub&gt;&amp;theta;&lt;/sub&gt;(x&lt;sub&gt;1&lt;/sub&gt;, y) = &amp;theta;&lt;sub&gt;0&lt;/sub&gt;x&lt;sub&gt;0&lt;/sub&gt; + &amp;theta;&lt;sub&gt;1&lt;/sub&gt;y - &amp;theta;&lt;sub&gt;0&lt;/sub&gt;x&lt;sub&gt;1&lt;/sub&gt; - &amp;theta;&lt;sub&gt;1&lt;/sub&gt;y = &amp;theta;&lt;sub&gt;0&lt;/sub&gt;(x&lt;sub&gt;0&lt;/sub&gt; - x&lt;sub&gt;1&lt;/sub&gt;) &lt;br&gt;\n&quot;,
    &quot;sensitivity = &amp;theta;&lt;sub&gt;0&lt;/sub&gt;(x&lt;sub&gt;0&lt;/sub&gt; - x&lt;sub&gt;1&lt;/sub&gt;)&lt;br&gt;\n&quot;,
    &quot;&lt;/div&gt;\n&quot;,
    &quot;Baseline value is defined as the value of the variable for which there is no contribution in the h&lt;sub&gt;&amp;theta;&lt;/sub&gt;(x\n&quot;,
    &quot;), that means the attribution due to the variable is equals to 0, from the same example we can say that when x = 0, the output is independent of x.&lt;br&gt;\n&quot;,
    &quot;h&lt;sub&gt;&amp;theta;&lt;/sub&gt;(0, y)= &amp;theta;&lt;sub&gt;1&lt;/sub&gt;y, so the baseline value for x = 0, in case of images as inputs, the baseline value can be black image or in case of numerical data, we assume the baseline value as the mode value&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;markdown&quot;,
   &quot;metadata&quot;: {},
   &quot;source&quot;: [
    &quot;&gt; Note: Attrbution in our case is simply the product of gradient of x with x or gradient of y with y, whichever is changing with respect to its baseline value&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;markdown&quot;,
   &quot;metadata&quot;: {},
   &quot;source&quot;: [
    &quot;### Implementation Variance&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;markdown&quot;,
   &quot;metadata&quot;: {},
   &quot;source&quot;: [
    &quot;If two neural networks are defined on the same set of input and results in the same output, then the two neural networks are similar in their function. Attribution should be the same for both of the neural networks irrespective of the hidden layer implementation within the neural network. Implementation Variance can be verified with the help of the chain rule : &lt;br&gt;&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;markdown&quot;,
   &quot;metadata&quot;: {},
   &quot;source&quot;: [
    &quot;$$ \\frac{\\partial f}{\\partial h}\\cdot \\frac{\\partial h}{\\partial g} $$&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;markdown&quot;,
   &quot;metadata&quot;: {},
   &quot;source&quot;: [
    &quot;In the above equation, $f$ and $g$ are the ouput and the input functions respectively and $h$ is the hidden layer(implementation), as we know backpropagation is used to relay the error to the previous layers, similarly we can relay/propagate the importance to all the neurons in each layer&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;markdown&quot;,
   &quot;metadata&quot;: {},
   &quot;source&quot;: [
    &quot;As we have understood Sensitivity, Baseline and Implementation invariance\n&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;markdown&quot;,
   &quot;metadata&quot;: {},
   &quot;source&quot;: [
    &quot;### Sensitivity check on Gradients&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;markdown&quot;,
   &quot;metadata&quot;: {},
   &quot;source&quot;: [
    &quot;Consider a toy function: F(x) = (1 - ReLu(1 - x)), the attribution with respect to $ x $ can be expressed as $ \\frac{dF(x)}{dx} $, for points $ x \\geq 1 $ as show in the Fig. 1., $ F'(x) = 0 $, in other words attribution for each $ x \\geq 1 $ will be 0, but we have defined that attribution will only be 0 at the baseline value. Hence, the sensitivty failed on the toy function, with that we can conclude that calculating derivatives isn't a viable option to evaluate attributions, as neural networks has ReLu() activation layers&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;markdown&quot;,
   &quot;metadata&quot;: {},
   &quot;source&quot;: [
    &quot;### The New way&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;markdown&quot;,
   &quot;metadata&quot;: {},
   &quot;source&quot;: [
    &quot;we find the gradient along the path from the baseline value $x'$ to $x$ and then we integrate all those gradients by averaging them.&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;markdown&quot;,
   &quot;metadata&quot;: {},
   &quot;source&quot;: [
    &quot;$$ IntergratedGradients_i(x) \\equiv (x_i - x_i') \\times \\int_{\\alpha = 0}^{1} \\frac{\\partial F(\\alpha x + x'(1 - \\alpha))}{\\partial x_i} d\\alpha $$&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;markdown&quot;,
   &quot;metadata&quot;: {},
   &quot;source&quot;: [
    &quot;#### Does the New Method satisfies the sensitivity and Implementation variance?&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;markdown&quot;,
   &quot;metadata&quot;: {},
   &quot;source&quot;: [
    &quot;Yes, It does.&lt;br&gt;\n&quot;,
    &quot;Let's understand this with the help of an example: Let's assume _a_, _b_ be two values of the input variable $x$, _a_ is the baseline value and _b_ is the location at which we want our model to predict. The difference between prediction at both the points is the average of the integration of the gradients along the points from _a_ to _b_.\n&quot;,
    &quot;&lt;br&gt;\n&quot;,
    &quot;Implementation variance is also satisfied as the integrated gradients is based on gradients of the network and chain rule is applicable over gradients.&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;code&quot;,
   &quot;execution_count&quot;: null,
   &quot;metadata&quot;: {},
   &quot;outputs&quot;: [],
   &quot;source&quot;: [
    &quot;def relu(x):\n&quot;,
    &quot;    if(x &gt; 0):\n&quot;,
    &quot;        return x\n&quot;,
    &quot;    else: \n&quot;,
    &quot;        return 0\n&quot;,
    &quot;    \n&quot;,
    &quot;def toy_fn(x):\n&quot;,
    &quot;    return (1 - relu(1 - x))&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;code&quot;,
   &quot;execution_count&quot;: null,
   &quot;metadata&quot;: {},
   &quot;outputs&quot;: [],
   &quot;source&quot;: [
    &quot;#hide\n&quot;,
    &quot;x = (np.arange(-10, 20, 0.01))\n&quot;,
    &quot;y = list()\n&quot;,
    &quot;for i in list(x):\n&quot;,
    &quot;     y.append(toy_fn(i))&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;code&quot;,
   &quot;execution_count&quot;: null,
   &quot;metadata&quot;: {},
   &quot;outputs&quot;: [],
   &quot;source&quot;: [
    &quot;#hide_input\n&quot;,
    &quot;plt.plot(x, y)\n&quot;,
    &quot;plt.title('Figure 1')\n&quot;,
    &quot;plt.show()&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;code&quot;,
   &quot;execution_count&quot;: null,
   &quot;metadata&quot;: {},
   &quot;outputs&quot;: [],
   &quot;source&quot;: [
    &quot;_ = viz.visualize_image_attr(attribute, original_img, show_colorbar=True,\n&quot;,
    &quot;                            method=\&quot;blended_heat_map\&quot;, sign=\&quot;all\&quot;, title=\&quot;Overlayed Integrated Gradients\&quot;)&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;code&quot;,
   &quot;execution_count&quot;: 47,
   &quot;metadata&quot;: {},
   &quot;outputs&quot;: [
    {
     &quot;data&quot;: {
      &quot;image/png&quot;: &quot;\n&quot;,
      &quot;text/plain&quot;: [
       &quot;&lt;Figure size 432x432 with 2 Axes&gt;&quot;
      ]
     },
     &quot;metadata&quot;: {
      &quot;needs_background&quot;: &quot;light&quot;
     },
     &quot;output_type&quot;: &quot;display_data&quot;
    }
   ],
   &quot;source&quot;: [
    &quot;ig = IntegratedGradients(net)\n&quot;,
    &quot;nt = NoiseTunnel(ig)\n&quot;,
    &quot;\n&quot;,
    &quot;attribute_nt = attribute_image_features(nt, input, baselines=input*0,\n&quot;,
    &quot;                                       nt_type='smoothgrad_sq', n_samples=100, stdevs=0.2)\n&quot;,
    &quot;attribute_nt = np.transpose(attribute_nt.squeeze().cpu().detach().numpy(), (1,2,0))\n&quot;,
    &quot;\n&quot;,
    &quot;_ = viz.visualize_image_attr(attribute_nt, original_img, show_colorbar=True, outlier_perc=10,\n&quot;,
    &quot;                            method='blended_heat_map', sign=\&quot;absolute_value\&quot;, title=\&quot;Overlayed Integrated Gradients \\n with smoothGrad square\&quot;)&quot;
   ]
  },
  {
   &quot;cell_type&quot;: &quot;code&quot;,
   &quot;execution_count&quot;: 50,
   &quot;metadata&quot;: {},
   &quot;outputs&quot;: [
    {
     &quot;name&quot;: &quot;stderr&quot;,
     &quot;output_type&quot;: &quot;stream&quot;,
     &quot;text&quot;: [
      &quot;/opt/conda/lib/python3.7/site-packages/captum/attr/_core/deep_lift.py:301: UserWarning: Setting forward, backward hooks and attributes on non-linear\n&quot;,
      &quot;               activations. The hooks and attributes will be removed\n&quot;,
      &quot;            after the attribution is finished\n&quot;,
      &quot;  after the attribution is finished\&quot;\&quot;\&quot;\n&quot;
     ]
    },
    {
     &quot;data&quot;: {
      &quot;image/png&quot;: &quot;\n&quot;,
      &quot;text/plain&quot;: [
       &quot;&lt;Figure size 432x432 with 2 Axes&gt;&quot;
      ]
     },
     &quot;metadata&quot;: {
      &quot;needs_background&quot;: &quot;light&quot;
     },
     &quot;output_type&quot;: &quot;display_data&quot;
    }
   ],
   &quot;source&quot;: [
    &quot;dl = DeepLift(net)\n&quot;,
    &quot;attribute_dl = attribute_image_features(dl, input, baselines=input*0)\n&quot;,
    &quot;attribute_dl = np.transpose(attribute_dl.squeeze().cpu().detach().numpy(), (1,2,0))\n&quot;,
    &quot;\n&quot;,
    &quot;_ = viz.visualize_image_attr(attribute_dl, original_img, show_colorbar=True,\n&quot;,
    &quot;                            method=\&quot;blended_heat_map\&quot;, sign=\&quot;all\&quot;, title=\&quot;Overlayed DeepLift\&quot;)&quot;
   ]
  }
 ],
 &quot;metadata&quot;: {
  &quot;kernelspec&quot;: {
   &quot;display_name&quot;: &quot;Python 3&quot;,
   &quot;language&quot;: &quot;python&quot;,
   &quot;name&quot;: &quot;python3&quot;
  },
  &quot;language_info&quot;: {
   &quot;codemirror_mode&quot;: {
    &quot;name&quot;: &quot;ipython&quot;,
    &quot;version&quot;: 3
   },
   &quot;file_extension&quot;: &quot;.py&quot;,
   &quot;mimetype&quot;: &quot;text/x-python&quot;,
   &quot;name&quot;: &quot;python&quot;,
   &quot;nbconvert_exporter&quot;: &quot;python&quot;,
   &quot;pygments_lexer&quot;: &quot;ipython3&quot;,
   &quot;version&quot;: &quot;3.8.5&quot;
  }
 },
 &quot;nbformat&quot;: 4,
 &quot;nbformat_minor&quot;: 4
}</content><author><name></name></author><summary type="html">{ &quot;cells&quot;: [ { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;# Understanding Captum with CIFAR&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;[Captum](https://captum.ai) is an open-source extensible library for model interpretability and explainability built on [PyTorch](https://pytorch.org).\n&quot;, &quot;\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot;\n&quot;, &quot;\n&quot;, &quot;With the recent advancements in the Machine Learning there's a need to understand the working of the model in order to improve its performance and construct an explaination of the features learned, it is an active field of research as well as area of focus for practical applications across industries working with machine learning.\n&quot;, &quot;Also, as the model complexity increases consequently we observe a lack of transaparency which might introduce biasness in the system.\n&quot;, &quot;Model Interpretability can also be used to provide explaination to questions that concern data ethicality, for example searching \&quot;beautiful skin\&quot; on google, results in \&quot;White-skinned Women\&quot;, if we were to train our model on data extracted from search enigines like google, bing, etc. our model is likely to associate beauty with white skin, which can be explained with methods like Integrated Gradients, DeepLift, etc.\n&quot;, &quot;To study further about Data Ethics and biases in the datasets, click [here](https://github.com/fastai/fastbook/blob/master/03_ethics.ipynb)&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;This is a code-first tutorial with fastai2(will be officially updated to fastai in July 2020), since fastai is built on PyTorch so I have defined a custom pipeline and learner in fastai and used captum for visualisation of features.&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 2, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [ &quot;from utils import *\n&quot;, &quot;from fastai2.vision.all import *&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;&gt;Note: It's important to set a random seed manually in order to have uniformity, and also it's convenient to obtain the same set of random numbers in the form of an array or a tensor.&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 3, &quot;metadata&quot;: {}, &quot;outputs&quot;: [ { &quot;data&quot;: { &quot;text/plain&quot;: [ &quot;&quot; ] }, &quot;execution_count&quot;: 3, &quot;metadata&quot;: {}, &quot;output_type&quot;: &quot;execute_result&quot; } ], &quot;source&quot;: [ &quot;np.random.seed(42)\n&quot;, &quot;torch.manual_seed(42)&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 4, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [ &quot;path = untar_data(URLs.CIFAR)&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 5, &quot;metadata&quot;: {}, &quot;outputs&quot;: [ { &quot;name&quot;: &quot;stdout&quot;, &quot;output_type&quot;: &quot;stream&quot;, &quot;text&quot;: [ &quot;\u001b[01;34m/home/jayesh0vasudeva/.fastai/data/cifar10\u001b[00m\n&quot;, &quot;├── \u001b[01;34mtest\u001b[00m\n&quot;, &quot;│   ├── \u001b[01;34mairplane\u001b[00m\n&quot;, &quot;│   ├── \u001b[01;34mautomobile\u001b[00m\n&quot;, &quot;│   ├── \u001b[01;34mbird\u001b[00m\n&quot;, &quot;│   ├── \u001b[01;34mcat\u001b[00m\n&quot;, &quot;│   ├── \u001b[01;34mdeer\u001b[00m\n&quot;, &quot;│   ├── \u001b[01;34mdog\u001b[00m\n&quot;, &quot;│   ├── \u001b[01;34mfrog\u001b[00m\n&quot;, &quot;│   ├── \u001b[01;34mhorse\u001b[00m\n&quot;, &quot;│   ├── \u001b[01;34mship\u001b[00m\n&quot;, &quot;│   └── \u001b[01;34mtruck\u001b[00m\n&quot;, &quot;└── \u001b[01;34mtrain\u001b[00m\n&quot;, &quot; ├── \u001b[01;34mairplane\u001b[00m\n&quot;, &quot; ├── \u001b[01;34mautomobile\u001b[00m\n&quot;, &quot; ├── \u001b[01;34mbird\u001b[00m\n&quot;, &quot; ├── \u001b[01;34mcat\u001b[00m\n&quot;, &quot; ├── \u001b[01;34mdeer\u001b[00m\n&quot;, &quot; ├── \u001b[01;34mdog\u001b[00m\n&quot;, &quot; ├── \u001b[01;34mfrog\u001b[00m\n&quot;, &quot; ├── \u001b[01;34mhorse\u001b[00m\n&quot;, &quot; ├── \u001b[01;34mship\u001b[00m\n&quot;, &quot; └── \u001b[01;34mtruck\u001b[00m\n&quot;, &quot;\n&quot;, &quot;22 directories\n&quot; ] } ], &quot;source&quot;: [ &quot;!tree -d {path}&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 6, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [ &quot;#hide\n&quot;, &quot;path_train = path/'train'\n&quot;, &quot;path_test = path/'test'\n&quot;, &quot;\n&quot;, &quot;files = get_image_files(path_train)&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 7, &quot;metadata&quot;: {}, &quot;outputs&quot;: [ { &quot;data&quot;: { &quot;text/plain&quot;: [ &quot;(#10) ['ship','frog','deer','airplane','bird','automobile','dog','horse','truck','cat']&quot; ] }, &quot;execution_count&quot;: 7, &quot;metadata&quot;: {}, &quot;output_type&quot;: &quot;execute_result&quot; } ], &quot;source&quot;: [ &quot;classes = L(file.parent.stem for file in files).unique()\n&quot;, &quot;classes&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 8, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [ &quot;from matplotlib import pyplot as plt\n&quot;, &quot;\n&quot;, &quot;def imshow(img, save=False, name=None):\n&quot;, &quot; plt.imshow(img)\n&quot;, &quot; if save:\n&quot;, &quot; plt.savefig(name)\n&quot;, &quot; plt.show()&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 9, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [ &quot;import torch.nn as nn \n&quot;, &quot;import torch.nn.functional as F &quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;The model consists of two 2D-convolutional layers and 3 Linear Layers, each convolutional layer is followed by a `MaxPool2d` layer, the obtained actiavtion map from the last layer is stretched into a vector. The vector produced are then passed onto the linear layer to obtain the probabilities of the classes.&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 10, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [ &quot;class Model(nn.Module):\n&quot;, &quot; \n&quot;, &quot; def __init__(self):\n&quot;, &quot; super(Model, self).__init__()\n&quot;, &quot; self.conv1 = nn.Conv2d(3, 6, 5)\n&quot;, &quot; self.pool1 = nn.MaxPool2d(2,2)\n&quot;, &quot; self.pool2 = nn.MaxPool2d(2,2)\n&quot;, &quot; self.conv2 = nn.Conv2d(6, 15, 5)\n&quot;, &quot; self.fc1 = nn.Linear(15*4*4, 120)\n&quot;, &quot; self.fc2 = nn.Linear(120, 84)\n&quot;, &quot; self.fc3 = nn.Linear(84, 10)\n&quot;, &quot; self.relu1 = nn.ReLU()\n&quot;, &quot; self.relu2 = nn.ReLU()\n&quot;, &quot; self.relu3 = nn.ReLU()\n&quot;, &quot; self.relu4 = nn.ReLU()\n&quot;, &quot; \n&quot;, &quot; def forward(self, x):\n&quot;, &quot; x = self.pool1(self.relu1(self.conv1(x)))\n&quot;, &quot; x = self.pool2(self.relu2(self.conv2(x)))\n&quot;, &quot; x = x.view(-1, 15*4*4)\n&quot;, &quot; x = self.relu3(self.fc1(x))\n&quot;, &quot; x = self.relu4(self.fc2(x))\n&quot;, &quot; x = self.fc3(x)\n&quot;, &quot; return x\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot;net = Model()&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 11, &quot;metadata&quot;: {}, &quot;outputs&quot;: [ { &quot;data&quot;: { &quot;text/plain&quot;: [ &quot;Model(\n&quot;, &quot; (conv1): Conv2d(3, 6, kernel_size=(5, 5), stride=(1, 1))\n&quot;, &quot; (pool1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n&quot;, &quot; (pool2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n&quot;, &quot; (conv2): Conv2d(6, 15, kernel_size=(5, 5), stride=(1, 1))\n&quot;, &quot; (fc1): Linear(in_features=240, out_features=120, bias=True)\n&quot;, &quot; (fc2): Linear(in_features=120, out_features=84, bias=True)\n&quot;, &quot; (fc3): Linear(in_features=84, out_features=10, bias=True)\n&quot;, &quot; (relu1): ReLU()\n&quot;, &quot; (relu2): ReLU()\n&quot;, &quot; (relu3): ReLU()\n&quot;, &quot; (relu4): ReLU()\n&quot;, &quot;)&quot; ] }, &quot;execution_count&quot;: 11, &quot;metadata&quot;: {}, &quot;output_type&quot;: &quot;execute_result&quot; } ], &quot;source&quot;: [ &quot;#hide_input\n&quot;, &quot;net&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 12, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [ &quot;datablock = DataBlock(\n&quot;, &quot; blocks=(ImageBlock, CategoryBlock),\n&quot;, &quot; get_items=get_image_files,\n&quot;, &quot; splitter=RandomSplitter(valid_pct=0.2, seed=42),\n&quot;, &quot; get_y=parent_label,\n&quot;, &quot; item_tfms=Resize(28),\n&quot;, &quot; batch_tfms=aug_transforms()\n&quot;, &quot;)&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 13, &quot;metadata&quot;: {}, &quot;outputs&quot;: [ { &quot;data&quot;: { &quot;image/png&quot;: &quot;\n&quot;, &quot;text/plain&quot;: [ &quot;&quot; ] }, &quot;metadata&quot;: { &quot;needs_background&quot;: &quot;light&quot; }, &quot;output_type&quot;: &quot;display_data&quot; } ], &quot;source&quot;: [ &quot;dls = datablock.dataloaders(path_train, bs=64)\n&quot;, &quot;dls.train.show_batch(max_n=4, nrows=1)&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 14, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [ &quot;ind = 4\n&quot;, &quot;img, label = next(iter(dls.train))\n&quot;, &quot;# img = np.transpose(img[ind].squeeze().cpu().detach().numpy(), (1,2,0))&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 15, &quot;metadata&quot;: {}, &quot;outputs&quot;: [ { &quot;name&quot;: &quot;stdout&quot;, &quot;output_type&quot;: &quot;stream&quot;, &quot;text&quot;: [ &quot;tensor(0)\n&quot; ] }, { &quot;data&quot;: { &quot;image/png&quot;: &quot;\n&quot;, &quot;text/plain&quot;: [ &quot;&quot; ] }, &quot;metadata&quot;: { &quot;needs_background&quot;: &quot;light&quot; }, &quot;output_type&quot;: &quot;display_data&quot; } ], &quot;source&quot;: [ &quot;print(label[ind])\n&quot;, &quot;imshow(np.transpose(img[ind].squeeze().cpu().detach().numpy(), (1,2,0)))&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 16, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [ &quot;learner = Learner(dls, net, loss_func=nn.CrossEntropyLoss(), metrics=[accuracy])&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 17, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [ &quot;model_path = Path('models/captum_with_cifar.pth')\n&quot;, &quot;if(model_path.is_file()):\n&quot;, &quot; learner = learner.load('captum_with_cifar')\n&quot;, &quot;else:\n&quot;, &quot; print(\&quot;the model ain't available\&quot;)&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: null, &quot;metadata&quot;: {}, &quot;outputs&quot;: [ { &quot;data&quot;: { &quot;text/html&quot;: [ &quot;\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; 96.67% [29/30 21:13\n&quot;, &quot; \n&quot;, &quot;\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; epoch\n&quot;, &quot; train_loss\n&quot;, &quot; valid_loss\n&quot;, &quot; accuracy\n&quot;, &quot; time\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; 0\n&quot;, &quot; 1.066012\n&quot;, &quot; 1.104123\n&quot;, &quot; 0.616100\n&quot;, &quot; 00:44\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; 1\n&quot;, &quot; 1.091863\n&quot;, &quot; 1.125392\n&quot;, &quot; 0.603600\n&quot;, &quot; 00:43\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; 2\n&quot;, &quot; 1.101116\n&quot;, &quot; 1.097657\n&quot;, &quot; 0.619200\n&quot;, &quot; 00:44\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; 3\n&quot;, &quot; 1.099387\n&quot;, &quot; 1.117531\n&quot;, &quot; 0.609700\n&quot;, &quot; 00:43\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; 4\n&quot;, &quot; 1.105429\n&quot;, &quot; 1.115222\n&quot;, &quot; 0.609500\n&quot;, &quot; 00:43\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; 5\n&quot;, &quot; 1.104295\n&quot;, &quot; 1.095076\n&quot;, &quot; 0.620100\n&quot;, &quot; 00:42\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; 6\n&quot;, &quot; 1.102067\n&quot;, &quot; 1.104189\n&quot;, &quot; 0.616400\n&quot;, &quot; 00:44\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; 7\n&quot;, &quot; 1.110839\n&quot;, &quot; 1.117669\n&quot;, &quot; 0.610900\n&quot;, &quot; 00:43\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; 8\n&quot;, &quot; 1.095918\n&quot;, &quot; 1.116252\n&quot;, &quot; 0.609200\n&quot;, &quot; 00:43\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; 9\n&quot;, &quot; 1.088083\n&quot;, &quot; 1.107244\n&quot;, &quot; 0.611500\n&quot;, &quot; 00:44\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; 10\n&quot;, &quot; 1.081308\n&quot;, &quot; 1.099444\n&quot;, &quot; 0.613600\n&quot;, &quot; 00:45\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; 11\n&quot;, &quot; 1.063852\n&quot;, &quot; 1.148774\n&quot;, &quot; 0.602000\n&quot;, &quot; 00:43\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; 12\n&quot;, &quot; 1.114893\n&quot;, &quot; 1.095030\n&quot;, &quot; 0.615100\n&quot;, &quot; 00:43\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; 13\n&quot;, &quot; 1.091594\n&quot;, &quot; 1.132204\n&quot;, &quot; 0.603300\n&quot;, &quot; 00:44\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; 14\n&quot;, &quot; 1.074800\n&quot;, &quot; 1.101566\n&quot;, &quot; 0.609400\n&quot;, &quot; 00:44\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; 15\n&quot;, &quot; 1.067993\n&quot;, &quot; 1.086318\n&quot;, &quot; 0.621500\n&quot;, &quot; 00:43\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; 16\n&quot;, &quot; 1.070161\n&quot;, &quot; 1.086616\n&quot;, &quot; 0.616200\n&quot;, &quot; 00:43\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; 17\n&quot;, &quot; 1.060663\n&quot;, &quot; 1.089107\n&quot;, &quot; 0.614700\n&quot;, &quot; 00:44\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; 18\n&quot;, &quot; 1.055892\n&quot;, &quot; 1.095152\n&quot;, &quot; 0.614100\n&quot;, &quot; 00:43\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; 19\n&quot;, &quot; 1.054790\n&quot;, &quot; 1.072029\n&quot;, &quot; 0.621500\n&quot;, &quot; 00:43\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; 20\n&quot;, &quot; 1.058136\n&quot;, &quot; 1.092185\n&quot;, &quot; 0.620300\n&quot;, &quot; 00:43\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; 21\n&quot;, &quot; 1.051811\n&quot;, &quot; 1.075153\n&quot;, &quot; 0.623600\n&quot;, &quot; 00:43\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; 22\n&quot;, &quot; 1.047477\n&quot;, &quot; 1.083195\n&quot;, &quot; 0.622200\n&quot;, &quot; 00:43\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; 23\n&quot;, &quot; 1.044617\n&quot;, &quot; 1.090426\n&quot;, &quot; 0.619000\n&quot;, &quot; 00:43\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; 24\n&quot;, &quot; 1.040123\n&quot;, &quot; 1.073733\n&quot;, &quot; 0.624500\n&quot;, &quot; 00:44\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; 25\n&quot;, &quot; 1.026667\n&quot;, &quot; 1.085043\n&quot;, &quot; 0.622700\n&quot;, &quot; 00:43\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; 26\n&quot;, &quot; 1.033031\n&quot;, &quot; 1.062216\n&quot;, &quot; 0.628500\n&quot;, &quot; 00:44\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; 27\n&quot;, &quot; 1.046917\n&quot;, &quot; 1.066909\n&quot;, &quot; 0.627400\n&quot;, &quot; 00:44\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; 28\n&quot;, &quot; 1.044453\n&quot;, &quot; 1.067554\n&quot;, &quot; 0.626800\n&quot;, &quot; 00:43\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot;\n&quot;, &quot;\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; 53.12% [332/625 00:21\n&quot;, &quot; &quot; ], &quot;text/plain&quot;: [ &quot;&quot; ] }, &quot;metadata&quot;: {}, &quot;output_type&quot;: &quot;display_data&quot; } ], &quot;source&quot;: [ &quot;learner.fit_one_cycle(30, 2e-4)&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: null, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [ &quot;!mkdir models&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: null, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [ &quot;learner.save('captum_with_cifar')&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: null, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [ &quot;from captum.attr import IntegratedGradients, Saliency\n&quot;, &quot;from captum.attr import DeepLift, NoiseTunnel\n&quot;, &quot;from captum.attr import visualization as viz&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: null, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [ &quot;# from PIL import Image\n&quot;, &quot;# indx = 3\n&quot;, &quot;# img = Image.open(dls.train.items[indx])\n&quot;, &quot;# img = Tensor(np.array(img))\n&quot;, &quot;# label = dls.train.items[indx].parent.stem&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: null, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [ &quot;input = img[ind].unsqueeze(0)\n&quot;, &quot;input.requires_grad = True&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: null, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [ &quot;original_img = np.transpose(img[ind].squeeze().cpu().detach().numpy(), (1,2,0))\n&quot;, &quot;\n&quot;, &quot;_ = viz.visualize_image_attr(None, original_img, method='original_image', title='Original Image')&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: null, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [ &quot;saliency = Saliency(net)\n&quot;, &quot;grads = saliency.attribute(input, target=label[ind].item())\n&quot;, &quot;grads = np.transpose(grads.squeeze().cpu().detach().numpy(), (1, 2, 0))\n&quot;, &quot;\n&quot;, &quot;_ = viz.visualize_image_attr(grads, original_img, show_colorbar=True,\n&quot;, &quot; method=\&quot;blended_heat_map\&quot;, sign=\&quot;absolute_value\&quot;, title=\&quot;Overlayed gradient magnitude\&quot;)&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;Saliency Maps are a way to visualise the features learned by the model, it essentially depicts the contribution of each pixel in the image towards the classification score of a particular class, to learn more about saliency map click [here]().&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: null, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [ &quot;grads = torch.from_numpy(grads)\n&quot;, &quot;grads, i = torch.max(grads.abs(), dim=2)&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: null, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [ &quot;imshow(grads)&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: null, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [ &quot;def attribute_image_features(algo, input, **kwargs):\n&quot;, &quot; tensor_attributions = algo.attribute(input, \n&quot;, &quot; target=label[ind].item(),\n&quot;, &quot; **kwargs)\n&quot;, &quot; return tensor_attributions&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: null, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [ &quot;algo = IntegratedGradients(net)\n&quot;, &quot;attribute, delta = attribute_image_features(algo, input, baselines=input*0, return_convergence_delta=True)\n&quot;, &quot;attribute = np.transpose(attribute.squeeze().cpu().detach().numpy(), (1,2,0))\n&quot;, &quot;print('approximated delta : ', delta)&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;## Integrated Gradients&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;Before introducing integrated gradients we first need to understand the two fundamental axioms - sensitivity(and baseline value) and Implementation Variance &quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;### Sensitivity and Baseline Value&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;&gt; Note: We have assumed that Gradients of F(x) with respect to variable x tells us the importance of x in F(x) &quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;Sensitivity can be defined as the change in the output observed by changing a single variable in the function, keeping the rest of them constant, this change obtained is called the attribution of that variable, or simply one can say for a function: h&amp;theta;(x, y)= &amp;theta;0x + &amp;theta;1y\n&quot;, &quot;we assume a baseline of the variable x as x0 and we change x0 to x1 \n&quot;, &quot;the change or difference obtained observed is : \n&quot;, &quot;\n&quot;, &quot;h&amp;theta;(x0, y) - h&amp;theta;(x1, y) = &amp;theta;0x0 + &amp;theta;1y - &amp;theta;0x1 - &amp;theta;1y = &amp;theta;0(x0 - x1) \n&quot;, &quot;sensitivity = &amp;theta;0(x0 - x1)\n&quot;, &quot;\n&quot;, &quot;Baseline value is defined as the value of the variable for which there is no contribution in the h&amp;theta;(x\n&quot;, &quot;), that means the attribution due to the variable is equals to 0, from the same example we can say that when x = 0, the output is independent of x.\n&quot;, &quot;h&amp;theta;(0, y)= &amp;theta;1y, so the baseline value for x = 0, in case of images as inputs, the baseline value can be black image or in case of numerical data, we assume the baseline value as the mode value&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;&gt; Note: Attrbution in our case is simply the product of gradient of x with x or gradient of y with y, whichever is changing with respect to its baseline value&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;### Implementation Variance&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;If two neural networks are defined on the same set of input and results in the same output, then the two neural networks are similar in their function. Attribution should be the same for both of the neural networks irrespective of the hidden layer implementation within the neural network. Implementation Variance can be verified with the help of the chain rule : &quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;$$ \\frac{\\partial f}{\\partial h}\\cdot \\frac{\\partial h}{\\partial g} $$&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;In the above equation, $f$ and $g$ are the ouput and the input functions respectively and $h$ is the hidden layer(implementation), as we know backpropagation is used to relay the error to the previous layers, similarly we can relay/propagate the importance to all the neurons in each layer&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;As we have understood Sensitivity, Baseline and Implementation invariance\n&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;### Sensitivity check on Gradients&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;Consider a toy function: F(x) = (1 - ReLu(1 - x)), the attribution with respect to $ x $ can be expressed as $ \\frac{dF(x)}{dx} $, for points $ x \\geq 1 $ as show in the Fig. 1., $ F'(x) = 0 $, in other words attribution for each $ x \\geq 1 $ will be 0, but we have defined that attribution will only be 0 at the baseline value. Hence, the sensitivty failed on the toy function, with that we can conclude that calculating derivatives isn't a viable option to evaluate attributions, as neural networks has ReLu() activation layers&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;### The New way&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;we find the gradient along the path from the baseline value $x'$ to $x$ and then we integrate all those gradients by averaging them.&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;$$ IntergratedGradients_i(x) \\equiv (x_i - x_i') \\times \\int_{\\alpha = 0}^{1} \\frac{\\partial F(\\alpha x + x'(1 - \\alpha))}{\\partial x_i} d\\alpha $$&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;#### Does the New Method satisfies the sensitivity and Implementation variance?&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;Yes, It does.\n&quot;, &quot;Let's understand this with the help of an example: Let's assume _a_, _b_ be two values of the input variable $x$, _a_ is the baseline value and _b_ is the location at which we want our model to predict. The difference between prediction at both the points is the average of the integration of the gradients along the points from _a_ to _b_.\n&quot;, &quot;\n&quot;, &quot;Implementation variance is also satisfied as the integrated gradients is based on gradients of the network and chain rule is applicable over gradients.&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: null, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [ &quot;def relu(x):\n&quot;, &quot; if(x &gt; 0):\n&quot;, &quot; return x\n&quot;, &quot; else: \n&quot;, &quot; return 0\n&quot;, &quot; \n&quot;, &quot;def toy_fn(x):\n&quot;, &quot; return (1 - relu(1 - x))&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: null, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [ &quot;#hide\n&quot;, &quot;x = (np.arange(-10, 20, 0.01))\n&quot;, &quot;y = list()\n&quot;, &quot;for i in list(x):\n&quot;, &quot; y.append(toy_fn(i))&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: null, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [ &quot;#hide_input\n&quot;, &quot;plt.plot(x, y)\n&quot;, &quot;plt.title('Figure 1')\n&quot;, &quot;plt.show()&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: null, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [ &quot;_ = viz.visualize_image_attr(attribute, original_img, show_colorbar=True,\n&quot;, &quot; method=\&quot;blended_heat_map\&quot;, sign=\&quot;all\&quot;, title=\&quot;Overlayed Integrated Gradients\&quot;)&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 47, &quot;metadata&quot;: {}, &quot;outputs&quot;: [ { &quot;data&quot;: { &quot;image/png&quot;: &quot;\n&quot;, &quot;text/plain&quot;: [ &quot;&quot; ] }, &quot;metadata&quot;: { &quot;needs_background&quot;: &quot;light&quot; }, &quot;output_type&quot;: &quot;display_data&quot; } ], &quot;source&quot;: [ &quot;ig = IntegratedGradients(net)\n&quot;, &quot;nt = NoiseTunnel(ig)\n&quot;, &quot;\n&quot;, &quot;attribute_nt = attribute_image_features(nt, input, baselines=input*0,\n&quot;, &quot; nt_type='smoothgrad_sq', n_samples=100, stdevs=0.2)\n&quot;, &quot;attribute_nt = np.transpose(attribute_nt.squeeze().cpu().detach().numpy(), (1,2,0))\n&quot;, &quot;\n&quot;, &quot;_ = viz.visualize_image_attr(attribute_nt, original_img, show_colorbar=True, outlier_perc=10,\n&quot;, &quot; method='blended_heat_map', sign=\&quot;absolute_value\&quot;, title=\&quot;Overlayed Integrated Gradients \\n with smoothGrad square\&quot;)&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 50, &quot;metadata&quot;: {}, &quot;outputs&quot;: [ { &quot;name&quot;: &quot;stderr&quot;, &quot;output_type&quot;: &quot;stream&quot;, &quot;text&quot;: [ &quot;/opt/conda/lib/python3.7/site-packages/captum/attr/_core/deep_lift.py:301: UserWarning: Setting forward, backward hooks and attributes on non-linear\n&quot;, &quot; activations. The hooks and attributes will be removed\n&quot;, &quot; after the attribution is finished\n&quot;, &quot; after the attribution is finished\&quot;\&quot;\&quot;\n&quot; ] }, { &quot;data&quot;: { &quot;image/png&quot;: &quot;\n&quot;, &quot;text/plain&quot;: [ &quot;&quot; ] }, &quot;metadata&quot;: { &quot;needs_background&quot;: &quot;light&quot; }, &quot;output_type&quot;: &quot;display_data&quot; } ], &quot;source&quot;: [ &quot;dl = DeepLift(net)\n&quot;, &quot;attribute_dl = attribute_image_features(dl, input, baselines=input*0)\n&quot;, &quot;attribute_dl = np.transpose(attribute_dl.squeeze().cpu().detach().numpy(), (1,2,0))\n&quot;, &quot;\n&quot;, &quot;_ = viz.visualize_image_attr(attribute_dl, original_img, show_colorbar=True,\n&quot;, &quot; method=\&quot;blended_heat_map\&quot;, sign=\&quot;all\&quot;, title=\&quot;Overlayed DeepLift\&quot;)&quot; ] } ], &quot;metadata&quot;: { &quot;kernelspec&quot;: { &quot;display_name&quot;: &quot;Python 3&quot;, &quot;language&quot;: &quot;python&quot;, &quot;name&quot;: &quot;python3&quot; }, &quot;language_info&quot;: { &quot;codemirror_mode&quot;: { &quot;name&quot;: &quot;ipython&quot;, &quot;version&quot;: 3 }, &quot;file_extension&quot;: &quot;.py&quot;, &quot;mimetype&quot;: &quot;text/x-python&quot;, &quot;name&quot;: &quot;python&quot;, &quot;nbconvert_exporter&quot;: &quot;python&quot;, &quot;pygments_lexer&quot;: &quot;ipython3&quot;, &quot;version&quot;: &quot;3.8.5&quot; } }, &quot;nbformat&quot;: 4, &quot;nbformat_minor&quot;: 4 }</summary></entry><entry><title type="html">Iteration-0</title><link href="https://jayesh0vasudeva.github.io/Learning-Iteratively/markdown/2020/03/31/my-first-blog.html" rel="alternate" type="text/html" title="Iteration-0" /><published>2020-03-31T00:00:00-05:00</published><updated>2020-03-31T00:00:00-05:00</updated><id>https://jayesh0vasudeva.github.io/Learning-Iteratively/markdown/2020/03/31/my-first-blog</id><content type="html" xml:base="https://jayesh0vasudeva.github.io/Learning-Iteratively/markdown/2020/03/31/my-first-blog.html">&lt;h1 id=&quot;my-first-blog-&quot;&gt;My First Blog! :)&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Our intelligence is what makes us human, and AI is an extension of that quality.” &lt;br /&gt;
— Yann LeCun, Professor  NYU&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;deep-learning-is-really-a-powerful-metaphor-for-learning-about-the-world&quot;&gt;Deep learning is really a powerful metaphor for learning about the world!&lt;/h2&gt;

&lt;p&gt;Deep Learning / Machine Learning are the latest buzz words that you will hear people talk about a lot, especially those who are affiliated to the tech industry and I’m one of those students who aspire to contribute in the field and grow along with it. I studied Competitive Programming and really enjoyed it. I have learned that it significantly improves programming skills and the understanding of algorithms. Yet, I found myself wanting to try something different and new, and came across one of youtube’s suggestions about advancing career options for the future in the software field. I became even more inquisitive about this field of study and soon realised that the applications of Deep Learning is limited to one’s imagination. As I progressed I started developing intuition around most of the optimised processes around us, which catered my brain and heightened my skepticism. Deep Learning is inspired by the functioning of human brain and how the neurons work, essentially we try to create equivalent mathematical models to imitate fundamental tasks that every human performs on a daily basis, for instance: differentiation between objects (apple &amp;amp; orange), understanding texts etc. Now Learning, Deep Learning is an Iterative process and requires a lot of commitment to programming language one has chosen and all the iterations that you have been through so far, since it’s a Young field(with respect to its applications in the industry) and considerably very active for research, one needs to learn, practise and keep themselves updated.&lt;/p&gt;

&lt;h2 id=&quot;how-to-learn-from-this-iterative-process&quot;&gt;How to learn from this Iterative Process?&lt;/h2&gt;
&lt;p&gt;By far Python is the most popular language as per the survey of 24,000 Data professionals by Kaggle, some of the few sources from where one can learn python:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/3/&quot;&gt;official python 3 documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/channel/UCCezIgC97PvUuR4_gbFUs5g&quot;&gt;Corey schafer’s tutorial&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://courses.edx.org/courses/course-v1:MITx+6.00.1x_7+3T2015/course/&quot;&gt;Introduction to Computer Science and Programming using python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now for the Data Science / Machine Learning / Deep Learning there are tons of resources and courses available and I have explored a lot of them, for example:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLA89DCFA6ADACE599&quot;&gt;CS229 - machine learning and statistical pattern recognition &lt;em&gt;By Andrew Ng&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PL3FW7Lu3i5JvHM8ljYj-zLfQRF3EO8sYv&quot;&gt;CS231n - Computer vision &lt;em&gt;By Fei Fei Li and associates&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLyqSpQzTE6M9gCgajvQbc68Hk_JKGBAYT&quot;&gt;CS7015 - IIT Madras Deep learning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The content of these courses is very well structured and is taught by the greatest minds. There was something unique in the way Prof. Jeremy Howard at USFCA teaches &lt;a href=&quot;https://course.fast.ai&quot;&gt;practical deep learning for coders&lt;/a&gt;, watched a couple of videos from his &lt;a href=&quot;https://www.youtube.com/user/howardjeremyp&quot;&gt;YouTube channel&lt;/a&gt; and found his way of teaching very comprehensible and not much mathematical. Not to mention, high-school mathematics is enough to get started for deep learning. He follows a top-down approach which involves coding along with devising simple equivalent mathematical equations. Hence, I decided to get myself enrolled in Fast.ai course v4 2020. Currently, I’m in the 2nd week of the course, trying to get some insights in the library &lt;a href=&quot;https://github.com/fastai/fastai&quot;&gt;fastai&lt;/a&gt; and &lt;a href=&quot;https://github.com/fastai/fastai2&quot;&gt;fastai2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1128/1*H2bbbgCg4u71KsYay7eVhQ.png&quot; alt=&quot;fastai logo&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;what-is-fastai-and-why-i-favor-it&quot;&gt;What is &lt;strong&gt;Fastai&lt;/strong&gt; and Why I favor it?&lt;/h2&gt;
&lt;p&gt;‘fastai is a deep learning library which provides practitioners with high-level components that can quickly and easily provide state-of-the-art results in standard deep learning domains, and provides researchers with low-level components that can be mixed and matched to build new approaches. It aims to do both things without substantial compromises in ease of use, flexibility, or performance. This is possible thanks to a carefully layered architecture, which expresses common underlying patterns of many deep learning and data processing techniques in terms of decoupled abstractions. These abstractions can be expressed concisely and clearly by leveraging the dynamism of the underlying Python language and the flexibility of the PyTorch library. fastai includes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A new type dispatch system for Python along with a semantic type hierarchy for tensors&lt;/li&gt;
  &lt;li&gt;A GPU-optimized computer vision library which can be extended in pure Python&lt;/li&gt;
  &lt;li&gt;An optimizer which refactors out the common functionality of modern optimizers into two basic pieces,  allowing optimization algorithms to be implemented in 4-5 lines of code&lt;/li&gt;
  &lt;li&gt;A novel 2-way callback system that can access any part of the data, model, or optimizer and change it at - any point during training&lt;/li&gt;
  &lt;li&gt;A new data block API
…and much more.’ — &lt;a href=&quot;https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;&gt;source&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Besides the aforementioned points, fastai respects the read–eval–print loop (REPL) environment of the Jupyter Notebook, which can prove to be very handy at times. Most Importantly the layered API doesn’t only consist of a high-level and a low-level system but also a Mid-level system which helps to transit from the high-level, easy to use beginner API to low-level heavily featured API. There are more aspects to the the Library which I will discuss in the upcoming blogs. The course closely resembles the book “Deep Learning for coders with Fastai and Pytorch” &lt;em&gt;by Jeremy Howard &amp;amp; Sylvain gugger which will be available later this summer.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.fast.ai/images/fastai_paper/layered.PNG&quot; alt=&quot;layered API structure&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;about-the-blog-posts-series&quot;&gt;About the Blog Posts Series&lt;/h2&gt;
&lt;p&gt;The motivation behind the bolg is highly self-centered, as it helps me keep track of the course and my development, following the advice of Rachel Thomas(co-founder fastai), check out her &lt;a href=&quot;https://medium.com/@racheltho/why-you-yes-you-should-blog-7d2544ac1045&quot;&gt;blog&lt;/a&gt;.
Being on a lockdown rather proved to be helpful as it would be a tedious task to follow along with my university lectures.
Will try to make best out of the opportunity and will update you guys on my upcoming posts soon!
stay indoors, stay safe, take care :)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;PS:&lt;/em&gt; Special mention to the amazing community of Fastai and their support on the forums, they are a constant help and will support you throughout your journey in the fastai, there are walkthroughs of the fastai code repository available on the youtube, which I will try to include whenever necessary.&lt;/p&gt;</content><author><name></name></author><summary type="html">My First Blog! :)</summary></entry><entry><title type="html">Fastpages Notebook Blog Post</title><link href="https://jayesh0vasudeva.github.io/Learning-Iteratively/jupyter/2020/02/20/test.html" rel="alternate" type="text/html" title="Fastpages Notebook Blog Post" /><published>2020-02-20T00:00:00-06:00</published><updated>2020-02-20T00:00:00-06:00</updated><id>https://jayesh0vasudeva.github.io/Learning-Iteratively/jupyter/2020/02/20/test</id><content type="html" xml:base="https://jayesh0vasudeva.github.io/Learning-Iteratively/jupyter/2020/02/20/test.html">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-02-20-test.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h1 id=&quot;About&quot;&gt;About&lt;a class=&quot;anchor-link&quot; href=&quot;#About&quot;&gt; &lt;/a&gt;&lt;/h1&gt;&lt;p&gt;This notebook is a demonstration of some of capabilities of &lt;a href=&quot;https://github.com/fastai/fastpages&quot;&gt;fastpages&lt;/a&gt; with notebooks.&lt;/p&gt;
&lt;p&gt;With &lt;code&gt;fastpages&lt;/code&gt; you can save your jupyter notebooks into the &lt;code&gt;_notebooks&lt;/code&gt; folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts!&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Front-Matter&quot;&gt;Front Matter&lt;a class=&quot;anchor-link&quot; href=&quot;#Front-Matter&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Title
&amp;gt; Awesome summary

- toc:true- branch: master- badges: true- comments: true
- author: Hamel Husain &amp;amp; Jeremy Howard
- categories: [fastpages, jupyter]&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Setting &lt;code&gt;toc: true&lt;/code&gt; will automatically generate a table of contents&lt;/li&gt;
&lt;li&gt;Setting &lt;code&gt;badges: true&lt;/code&gt; will automatically include GitHub and Google Colab links to your notebook.&lt;/li&gt;
&lt;li&gt;Setting &lt;code&gt;comments: true&lt;/code&gt; will enable commenting on your blog post, powered by &lt;a href=&quot;https://github.com/utterance/utterances&quot;&gt;utterances&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More details and options for front matter can be viewed on the &lt;a href=&quot;https://github.com/fastai/fastpages#front-matter-related-options&quot;&gt;front matter section&lt;/a&gt; of the README.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Markdown-Shortcuts&quot;&gt;Markdown Shortcuts&lt;a class=&quot;anchor-link&quot; href=&quot;#Markdown-Shortcuts&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;A &lt;code&gt;#hide&lt;/code&gt; comment at the top of any code cell will hide &lt;strong&gt;both the input and output&lt;/strong&gt; of that cell in your blog post.&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;#hide_input&lt;/code&gt; comment at the top of any code cell will &lt;strong&gt;only hide the input&lt;/strong&gt; of that cell.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;The comment #hide_input was used to hide the code that produced this.
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;put a &lt;code&gt;#collapse-hide&lt;/code&gt; flag at the top of any cell if you want to &lt;strong&gt;hide&lt;/strong&gt; that cell by default, but give the reader the option to show it:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;details class=&quot;description&quot;&gt;
      &lt;summary class=&quot;btn btn-sm&quot; data-open=&quot;Hide Code&quot; data-close=&quot;Show Code&quot;&gt;&lt;/summary&gt;
        &lt;p&gt;&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#collapse-hide&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pd&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;altair&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;alt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
    &lt;/details&gt;
&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;put a &lt;code&gt;#collapse-show&lt;/code&gt; flag at the top of any cell if you want to &lt;strong&gt;show&lt;/strong&gt; that cell by default, but give the reader the option to hide it:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;details class=&quot;description&quot; open=&quot;&quot;&gt;
      &lt;summary class=&quot;btn btn-sm&quot; data-open=&quot;Hide Code&quot; data-close=&quot;Show Code&quot;&gt;&lt;/summary&gt;
        &lt;p&gt;&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#collapse-show&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://vega.github.io/vega-datasets/data/cars.json&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;movies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://vega.github.io/vega-datasets/data/movies.json&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sp500&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://vega.github.io/vega-datasets/data/sp500.csv&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stocks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://vega.github.io/vega-datasets/data/stocks.csv&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;flights&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://vega.github.io/vega-datasets/data/flights-5k.json&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
    &lt;/details&gt;
&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Interactive-Charts-With-Altair&quot;&gt;Interactive Charts With Altair&lt;a class=&quot;anchor-link&quot; href=&quot;#Interactive-Charts-With-Altair&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Charts made with Altair remain interactive.  Example charts taken from &lt;a href=&quot;https://github.com/uwdata/visualization-curriculum&quot;&gt;this repo&lt;/a&gt;, specifically &lt;a href=&quot;https://github.com/uwdata/visualization-curriculum/blob/master/altair_interaction.ipynb&quot;&gt;this notebook&lt;/a&gt;.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;Example-1:-DropDown&quot;&gt;Example 1: DropDown&lt;a class=&quot;anchor-link&quot; href=&quot;#Example-1:-DropDown&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# single-value selection over [Major_Genre, MPAA_Rating] pairs&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# use specific hard-wired values as the initial selected values&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;selection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selection_single&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Select&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Major_Genre&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;MPAA_Rating&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Major_Genre&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Drama&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;MPAA_Rating&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;R&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Major_Genre&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;binding_select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;genres&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;MPAA_Rating&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;binding_radio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mpaa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  
&lt;span class=&quot;c1&quot;&gt;# scatter plot, modify opacity based on selection&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Chart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;movies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mark_circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_selection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;selection&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Rotten_Tomatoes_Rating:Q&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;IMDB_Rating:Q&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tooltip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Title:N&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.05&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;


&lt;div class=&quot;output_html rendered_html output_subarea output_execute_result&quot;&gt;

&lt;div id=&quot;altair-viz-1a49e83878ce4d678d7b162f3d6b510f&quot;&gt;&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
  (function(spec, embedOpt){
    const outputDiv = document.getElementById(&quot;altair-viz-1a49e83878ce4d678d7b162f3d6b510f&quot;);
    const paths = {
      &quot;vega&quot;: &quot;https://cdn.jsdelivr.net/npm//vega@5?noext&quot;,
      &quot;vega-lib&quot;: &quot;https://cdn.jsdelivr.net/npm//vega-lib?noext&quot;,
      &quot;vega-lite&quot;: &quot;https://cdn.jsdelivr.net/npm//vega-lite@4.0.2?noext&quot;,
      &quot;vega-embed&quot;: &quot;https://cdn.jsdelivr.net/npm//vega-embed@6?noext&quot;,
    };

    function loadScript(lib) {
      return new Promise(function(resolve, reject) {
        var s = document.createElement('script');
        s.src = paths[lib];
        s.async = true;
        s.onload = () =&gt; resolve(paths[lib]);
        s.onerror = () =&gt; reject(`Error loading script: ${paths[lib]}`);
        document.getElementsByTagName(&quot;head&quot;)[0].appendChild(s);
      });
    }

    function showError(err) {
      outputDiv.innerHTML = `&lt;div class=&quot;error&quot; style=&quot;color:red;&quot;&gt;${err}&lt;/div&gt;`;
      throw err;
    }

    function displayChart(vegaEmbed) {
      vegaEmbed(outputDiv, spec, embedOpt)
        .catch(err =&gt; showError(`Javascript Error: ${err.message}&lt;br&gt;This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));
    }

    if(typeof define === &quot;function&quot; &amp;&amp; define.amd) {
      requirejs.config({paths});
      require([&quot;vega-embed&quot;], displayChart, err =&gt; showError(`Error loading script: ${err.message}`));
    } else if (typeof vegaEmbed === &quot;function&quot;) {
      displayChart(vegaEmbed);
    } else {
      loadScript(&quot;vega&quot;)
        .then(() =&gt; loadScript(&quot;vega-lite&quot;))
        .then(() =&gt; loadScript(&quot;vega-embed&quot;))
        .catch(showError)
        .then(() =&gt; displayChart(vegaEmbed));
    }
  })({&quot;config&quot;: {&quot;view&quot;: {&quot;continuousWidth&quot;: 400, &quot;continuousHeight&quot;: 300}}, &quot;data&quot;: {&quot;url&quot;: &quot;https://vega.github.io/vega-datasets/data/movies.json&quot;}, &quot;mark&quot;: &quot;circle&quot;, &quot;encoding&quot;: {&quot;opacity&quot;: {&quot;condition&quot;: {&quot;value&quot;: 0.75, &quot;selection&quot;: &quot;Select&quot;}, &quot;value&quot;: 0.05}, &quot;tooltip&quot;: {&quot;type&quot;: &quot;nominal&quot;, &quot;field&quot;: &quot;Title&quot;}, &quot;x&quot;: {&quot;type&quot;: &quot;quantitative&quot;, &quot;field&quot;: &quot;Rotten_Tomatoes_Rating&quot;}, &quot;y&quot;: {&quot;type&quot;: &quot;quantitative&quot;, &quot;field&quot;: &quot;IMDB_Rating&quot;}}, &quot;selection&quot;: {&quot;Select&quot;: {&quot;type&quot;: &quot;single&quot;, &quot;fields&quot;: [&quot;Major_Genre&quot;, &quot;MPAA_Rating&quot;], &quot;init&quot;: {&quot;Major_Genre&quot;: &quot;Drama&quot;, &quot;MPAA_Rating&quot;: &quot;R&quot;}, &quot;bind&quot;: {&quot;Major_Genre&quot;: {&quot;input&quot;: &quot;select&quot;, &quot;options&quot;: [&quot;Action&quot;, &quot;Adventure&quot;, &quot;Black Comedy&quot;, &quot;Comedy&quot;, &quot;Concert/Performance&quot;, &quot;Documentary&quot;, &quot;Drama&quot;, &quot;Horror&quot;, &quot;Musical&quot;, &quot;Romantic Comedy&quot;, &quot;Thriller/Suspense&quot;, &quot;Western&quot;]}, &quot;MPAA_Rating&quot;: {&quot;input&quot;: &quot;radio&quot;, &quot;options&quot;: [&quot;G&quot;, &quot;PG&quot;, &quot;PG-13&quot;, &quot;R&quot;, &quot;NC-17&quot;, &quot;Not Rated&quot;]}}}}, &quot;$schema&quot;: &quot;https://vega.github.io/schema/vega-lite/v4.0.2.json&quot;}, {&quot;mode&quot;: &quot;vega-lite&quot;});
&lt;/script&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;Example-2:-Tooltips&quot;&gt;Example 2: Tooltips&lt;a class=&quot;anchor-link&quot; href=&quot;#Example-2:-Tooltips&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Chart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;movies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mark_circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_selection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selection_interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;scales&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encodings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Rotten_Tomatoes_Rating:Q&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;IMDB_Rating:Q&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Axis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minExtent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# use min extent to stabilize axis title placement&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tooltip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Title:N&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Release_Date:N&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;IMDB_Rating:Q&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Rotten_Tomatoes_Rating:Q&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;


&lt;div class=&quot;output_html rendered_html output_subarea output_execute_result&quot;&gt;

&lt;div id=&quot;altair-viz-c022b476f4fb482ca6f609bf6ed082d2&quot;&gt;&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
  (function(spec, embedOpt){
    const outputDiv = document.getElementById(&quot;altair-viz-c022b476f4fb482ca6f609bf6ed082d2&quot;);
    const paths = {
      &quot;vega&quot;: &quot;https://cdn.jsdelivr.net/npm//vega@5?noext&quot;,
      &quot;vega-lib&quot;: &quot;https://cdn.jsdelivr.net/npm//vega-lib?noext&quot;,
      &quot;vega-lite&quot;: &quot;https://cdn.jsdelivr.net/npm//vega-lite@4.0.2?noext&quot;,
      &quot;vega-embed&quot;: &quot;https://cdn.jsdelivr.net/npm//vega-embed@6?noext&quot;,
    };

    function loadScript(lib) {
      return new Promise(function(resolve, reject) {
        var s = document.createElement('script');
        s.src = paths[lib];
        s.async = true;
        s.onload = () =&gt; resolve(paths[lib]);
        s.onerror = () =&gt; reject(`Error loading script: ${paths[lib]}`);
        document.getElementsByTagName(&quot;head&quot;)[0].appendChild(s);
      });
    }

    function showError(err) {
      outputDiv.innerHTML = `&lt;div class=&quot;error&quot; style=&quot;color:red;&quot;&gt;${err}&lt;/div&gt;`;
      throw err;
    }

    function displayChart(vegaEmbed) {
      vegaEmbed(outputDiv, spec, embedOpt)
        .catch(err =&gt; showError(`Javascript Error: ${err.message}&lt;br&gt;This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));
    }

    if(typeof define === &quot;function&quot; &amp;&amp; define.amd) {
      requirejs.config({paths});
      require([&quot;vega-embed&quot;], displayChart, err =&gt; showError(`Error loading script: ${err.message}`));
    } else if (typeof vegaEmbed === &quot;function&quot;) {
      displayChart(vegaEmbed);
    } else {
      loadScript(&quot;vega&quot;)
        .then(() =&gt; loadScript(&quot;vega-lite&quot;))
        .then(() =&gt; loadScript(&quot;vega-embed&quot;))
        .catch(showError)
        .then(() =&gt; displayChart(vegaEmbed));
    }
  })({&quot;config&quot;: {&quot;view&quot;: {&quot;continuousWidth&quot;: 400, &quot;continuousHeight&quot;: 300}}, &quot;data&quot;: {&quot;url&quot;: &quot;https://vega.github.io/vega-datasets/data/movies.json&quot;}, &quot;mark&quot;: &quot;circle&quot;, &quot;encoding&quot;: {&quot;tooltip&quot;: [{&quot;type&quot;: &quot;nominal&quot;, &quot;field&quot;: &quot;Title&quot;}, {&quot;type&quot;: &quot;nominal&quot;, &quot;field&quot;: &quot;Release_Date&quot;}, {&quot;type&quot;: &quot;quantitative&quot;, &quot;field&quot;: &quot;IMDB_Rating&quot;}, {&quot;type&quot;: &quot;quantitative&quot;, &quot;field&quot;: &quot;Rotten_Tomatoes_Rating&quot;}], &quot;x&quot;: {&quot;type&quot;: &quot;quantitative&quot;, &quot;field&quot;: &quot;Rotten_Tomatoes_Rating&quot;}, &quot;y&quot;: {&quot;type&quot;: &quot;quantitative&quot;, &quot;axis&quot;: {&quot;minExtent&quot;: 30}, &quot;field&quot;: &quot;IMDB_Rating&quot;}}, &quot;height&quot;: 400, &quot;selection&quot;: {&quot;selector001&quot;: {&quot;type&quot;: &quot;interval&quot;, &quot;bind&quot;: &quot;scales&quot;, &quot;encodings&quot;: [&quot;x&quot;]}}, &quot;width&quot;: 600, &quot;$schema&quot;: &quot;https://vega.github.io/schema/vega-lite/v4.0.2.json&quot;}, {&quot;mode&quot;: &quot;vega-lite&quot;});
&lt;/script&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;Example-3:-More-Tooltips&quot;&gt;Example 3: More Tooltips&lt;a class=&quot;anchor-link&quot; href=&quot;#Example-3:-More-Tooltips&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# select a point for which to provide details-on-demand&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selection_single&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;encodings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# limit selection to x-axis value&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;mouseover&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# select on mouseover events&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;nearest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# select data point nearest the cursor&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;none&amp;#39;&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;# empty selection includes no data points&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# define our base line chart of stock prices&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Chart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mark_line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;date:T&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;price:Q&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;log&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;symbol:N&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# base line chart&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# add a rule mark to serve as a guide line&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Chart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mark_rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;#aaa&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;date:T&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform_filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# add circle marks for selected time points, hide unselected points&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mark_circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_selection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# add white stroked text to provide a legible background for labels&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mark_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;align&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;left&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;white&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strokeWidth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;price:Q&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform_filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# add text labels for stock prices&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mark_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;align&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;left&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;price:Q&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform_filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stocks&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;700&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;


&lt;div class=&quot;output_html rendered_html output_subarea output_execute_result&quot;&gt;

&lt;div id=&quot;altair-viz-9283d3681fd24aafa3d1e2f9ad193ecf&quot;&gt;&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
  (function(spec, embedOpt){
    const outputDiv = document.getElementById(&quot;altair-viz-9283d3681fd24aafa3d1e2f9ad193ecf&quot;);
    const paths = {
      &quot;vega&quot;: &quot;https://cdn.jsdelivr.net/npm//vega@5?noext&quot;,
      &quot;vega-lib&quot;: &quot;https://cdn.jsdelivr.net/npm//vega-lib?noext&quot;,
      &quot;vega-lite&quot;: &quot;https://cdn.jsdelivr.net/npm//vega-lite@4.0.2?noext&quot;,
      &quot;vega-embed&quot;: &quot;https://cdn.jsdelivr.net/npm//vega-embed@6?noext&quot;,
    };

    function loadScript(lib) {
      return new Promise(function(resolve, reject) {
        var s = document.createElement('script');
        s.src = paths[lib];
        s.async = true;
        s.onload = () =&gt; resolve(paths[lib]);
        s.onerror = () =&gt; reject(`Error loading script: ${paths[lib]}`);
        document.getElementsByTagName(&quot;head&quot;)[0].appendChild(s);
      });
    }

    function showError(err) {
      outputDiv.innerHTML = `&lt;div class=&quot;error&quot; style=&quot;color:red;&quot;&gt;${err}&lt;/div&gt;`;
      throw err;
    }

    function displayChart(vegaEmbed) {
      vegaEmbed(outputDiv, spec, embedOpt)
        .catch(err =&gt; showError(`Javascript Error: ${err.message}&lt;br&gt;This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));
    }

    if(typeof define === &quot;function&quot; &amp;&amp; define.amd) {
      requirejs.config({paths});
      require([&quot;vega-embed&quot;], displayChart, err =&gt; showError(`Error loading script: ${err.message}`));
    } else if (typeof vegaEmbed === &quot;function&quot;) {
      displayChart(vegaEmbed);
    } else {
      loadScript(&quot;vega&quot;)
        .then(() =&gt; loadScript(&quot;vega-lite&quot;))
        .then(() =&gt; loadScript(&quot;vega-embed&quot;))
        .catch(showError)
        .then(() =&gt; displayChart(vegaEmbed));
    }
  })({&quot;config&quot;: {&quot;view&quot;: {&quot;continuousWidth&quot;: 400, &quot;continuousHeight&quot;: 300}}, &quot;layer&quot;: [{&quot;mark&quot;: &quot;line&quot;, &quot;encoding&quot;: {&quot;color&quot;: {&quot;type&quot;: &quot;nominal&quot;, &quot;field&quot;: &quot;symbol&quot;}, &quot;x&quot;: {&quot;type&quot;: &quot;temporal&quot;, &quot;field&quot;: &quot;date&quot;}, &quot;y&quot;: {&quot;type&quot;: &quot;quantitative&quot;, &quot;field&quot;: &quot;price&quot;, &quot;scale&quot;: {&quot;type&quot;: &quot;log&quot;}}}}, {&quot;mark&quot;: {&quot;type&quot;: &quot;rule&quot;, &quot;color&quot;: &quot;#aaa&quot;}, &quot;encoding&quot;: {&quot;x&quot;: {&quot;type&quot;: &quot;temporal&quot;, &quot;field&quot;: &quot;date&quot;}}, &quot;transform&quot;: [{&quot;filter&quot;: {&quot;selection&quot;: &quot;selector002&quot;}}]}, {&quot;mark&quot;: &quot;circle&quot;, &quot;encoding&quot;: {&quot;color&quot;: {&quot;type&quot;: &quot;nominal&quot;, &quot;field&quot;: &quot;symbol&quot;}, &quot;opacity&quot;: {&quot;condition&quot;: {&quot;value&quot;: 1, &quot;selection&quot;: &quot;selector002&quot;}, &quot;value&quot;: 0}, &quot;x&quot;: {&quot;type&quot;: &quot;temporal&quot;, &quot;field&quot;: &quot;date&quot;}, &quot;y&quot;: {&quot;type&quot;: &quot;quantitative&quot;, &quot;field&quot;: &quot;price&quot;, &quot;scale&quot;: {&quot;type&quot;: &quot;log&quot;}}}, &quot;selection&quot;: {&quot;selector002&quot;: {&quot;type&quot;: &quot;single&quot;, &quot;encodings&quot;: [&quot;x&quot;], &quot;on&quot;: &quot;mouseover&quot;, &quot;nearest&quot;: true, &quot;empty&quot;: &quot;none&quot;}}}, {&quot;mark&quot;: {&quot;type&quot;: &quot;text&quot;, &quot;align&quot;: &quot;left&quot;, &quot;dx&quot;: 5, &quot;dy&quot;: -5, &quot;stroke&quot;: &quot;white&quot;, &quot;strokeWidth&quot;: 2}, &quot;encoding&quot;: {&quot;color&quot;: {&quot;type&quot;: &quot;nominal&quot;, &quot;field&quot;: &quot;symbol&quot;}, &quot;text&quot;: {&quot;type&quot;: &quot;quantitative&quot;, &quot;field&quot;: &quot;price&quot;}, &quot;x&quot;: {&quot;type&quot;: &quot;temporal&quot;, &quot;field&quot;: &quot;date&quot;}, &quot;y&quot;: {&quot;type&quot;: &quot;quantitative&quot;, &quot;field&quot;: &quot;price&quot;, &quot;scale&quot;: {&quot;type&quot;: &quot;log&quot;}}}, &quot;transform&quot;: [{&quot;filter&quot;: {&quot;selection&quot;: &quot;selector002&quot;}}]}, {&quot;mark&quot;: {&quot;type&quot;: &quot;text&quot;, &quot;align&quot;: &quot;left&quot;, &quot;dx&quot;: 5, &quot;dy&quot;: -5}, &quot;encoding&quot;: {&quot;color&quot;: {&quot;type&quot;: &quot;nominal&quot;, &quot;field&quot;: &quot;symbol&quot;}, &quot;text&quot;: {&quot;type&quot;: &quot;quantitative&quot;, &quot;field&quot;: &quot;price&quot;}, &quot;x&quot;: {&quot;type&quot;: &quot;temporal&quot;, &quot;field&quot;: &quot;date&quot;}, &quot;y&quot;: {&quot;type&quot;: &quot;quantitative&quot;, &quot;field&quot;: &quot;price&quot;, &quot;scale&quot;: {&quot;type&quot;: &quot;log&quot;}}}, &quot;transform&quot;: [{&quot;filter&quot;: {&quot;selection&quot;: &quot;selector002&quot;}}]}], &quot;data&quot;: {&quot;url&quot;: &quot;https://vega.github.io/vega-datasets/data/stocks.csv&quot;}, &quot;height&quot;: 400, &quot;width&quot;: 700, &quot;$schema&quot;: &quot;https://vega.github.io/schema/vega-lite/v4.0.2.json&quot;}, {&quot;mode&quot;: &quot;vega-lite&quot;});
&lt;/script&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Data-Tables&quot;&gt;Data Tables&lt;a class=&quot;anchor-link&quot; href=&quot;#Data-Tables&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;You can display tables per the usual way in your blog:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;movies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://vega.github.io/vega-datasets/data/movies.json&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;movies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# display table with pandas&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Title&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Worldwide_Gross&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;Production_Budget&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Distributor&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;MPAA_Rating&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;IMDB_Rating&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Rotten_Tomatoes_Rating&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;


&lt;div class=&quot;output_html rendered_html output_subarea output_execute_result&quot;&gt;
&lt;div&gt;
&lt;style scoped=&quot;&quot;&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;
  &lt;thead&gt;
    &lt;tr style=&quot;text-align: right;&quot;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Title&lt;/th&gt;
      &lt;th&gt;Worldwide_Gross&lt;/th&gt;
      &lt;th&gt;Production_Budget&lt;/th&gt;
      &lt;th&gt;Distributor&lt;/th&gt;
      &lt;th&gt;MPAA_Rating&lt;/th&gt;
      &lt;th&gt;IMDB_Rating&lt;/th&gt;
      &lt;th&gt;Rotten_Tomatoes_Rating&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;The Land Girls&lt;/td&gt;
      &lt;td&gt;146083.0&lt;/td&gt;
      &lt;td&gt;8000000.0&lt;/td&gt;
      &lt;td&gt;Gramercy&lt;/td&gt;
      &lt;td&gt;R&lt;/td&gt;
      &lt;td&gt;6.1&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;First Love, Last Rites&lt;/td&gt;
      &lt;td&gt;10876.0&lt;/td&gt;
      &lt;td&gt;300000.0&lt;/td&gt;
      &lt;td&gt;Strand&lt;/td&gt;
      &lt;td&gt;R&lt;/td&gt;
      &lt;td&gt;6.9&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;I Married a Strange Person&lt;/td&gt;
      &lt;td&gt;203134.0&lt;/td&gt;
      &lt;td&gt;250000.0&lt;/td&gt;
      &lt;td&gt;Lionsgate&lt;/td&gt;
      &lt;td&gt;None&lt;/td&gt;
      &lt;td&gt;6.8&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;Let's Talk About Sex&lt;/td&gt;
      &lt;td&gt;373615.0&lt;/td&gt;
      &lt;td&gt;300000.0&lt;/td&gt;
      &lt;td&gt;Fine Line&lt;/td&gt;
      &lt;td&gt;None&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;13.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;Slam&lt;/td&gt;
      &lt;td&gt;1087521.0&lt;/td&gt;
      &lt;td&gt;1000000.0&lt;/td&gt;
      &lt;td&gt;Trimark&lt;/td&gt;
      &lt;td&gt;R&lt;/td&gt;
      &lt;td&gt;3.4&lt;/td&gt;
      &lt;td&gt;62.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Images&quot;&gt;Images&lt;a class=&quot;anchor-link&quot; href=&quot;#Images&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&quot;Local-Images&quot;&gt;Local Images&lt;a class=&quot;anchor-link&quot; href=&quot;#Local-Images&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;You can reference local images and they will be copied and rendered on your blog automatically.  You can include these with the following markdown syntax:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;![](my_icons/fastai_logo.png)&lt;/code&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;&lt;img src=&quot;/Learning-Iteratively/images/copied_from_nb/my_icons/fastai_logo.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;Remote-Images&quot;&gt;Remote Images&lt;a class=&quot;anchor-link&quot; href=&quot;#Remote-Images&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Remote images can be included with the following markdown syntax:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;![](https://image.flaticon.com/icons/svg/36/36686.svg)&lt;/code&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://image.flaticon.com/icons/svg/36/36686.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;Animated-Gifs&quot;&gt;Animated Gifs&lt;a class=&quot;anchor-link&quot; href=&quot;#Animated-Gifs&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Animated Gifs work, too!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif)&lt;/code&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;Captions&quot;&gt;Captions&lt;a class=&quot;anchor-link&quot; href=&quot;#Captions&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;You can include captions with markdown images like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://www.fast.ai/images/fastai_paper/show_batch.png&quot; alt=&quot;&quot; title=&quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot; /&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h1 id=&quot;Other-Elements&quot;&gt;Other Elements&lt;a class=&quot;anchor-link&quot; href=&quot;#Other-Elements&quot;&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Tweetcards&quot;&gt;Tweetcards&lt;a class=&quot;anchor-link&quot; href=&quot;#Tweetcards&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Typing &lt;code&gt;&amp;gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20&lt;/code&gt; will render this:

&lt;center&gt;
    &lt;div class=&quot;jekyll-twitter-plugin&quot;&gt;&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Altair 4.0 is released! &lt;a href=&quot;https://t.co/PCyrIOTcvv&quot;&gt;https://t.co/PCyrIOTcvv&lt;/a&gt;&lt;br /&gt;Try it with:&lt;br /&gt;&lt;br /&gt;  pip install -U altair&lt;br /&gt;&lt;br /&gt;The full list of changes is at &lt;a href=&quot;https://t.co/roXmzcsT58&quot;&gt;https://t.co/roXmzcsT58&lt;/a&gt; ...read on for some highlights. &lt;a href=&quot;https://t.co/vWJ0ZveKbZ&quot;&gt;pic.twitter.com/vWJ0ZveKbZ&lt;/a&gt;&lt;/p&gt;&amp;mdash; Jake VanderPlas (@jakevdp) &lt;a href=&quot;https://twitter.com/jakevdp/status/1204765621767901185?ref_src=twsrc%5Etfw&quot;&gt;December 11, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;/center&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Youtube-Videos&quot;&gt;Youtube Videos&lt;a class=&quot;anchor-link&quot; href=&quot;#Youtube-Videos&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Typing &lt;code&gt;&amp;gt; youtube: https://youtu.be/XfoYk_Z5AkI&lt;/code&gt; will render this:

&lt;center&gt;
    &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/XfoYk_Z5AkI&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/center&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Boxes-/-Callouts&quot;&gt;Boxes / Callouts&lt;a class=&quot;anchor-link&quot; href=&quot;#Boxes-/-Callouts&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Typing &lt;code&gt;&amp;gt; Warning: There will be no second warning!&lt;/code&gt; will render this:
&lt;div class=&quot;flash flash-error&quot;&gt;
    &lt;svg class=&quot;octicon octicon-alert&quot; viewBox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; width=&quot;16&quot; height=&quot;16&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 000 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 00.01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;
    &lt;strong&gt;Warning: &lt;/strong&gt;There will be no second warning!
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Typing &lt;code&gt;&amp;gt; Important: Pay attention! It's important.&lt;/code&gt; will render this:
&lt;div class=&quot;flash flash-warn&quot;&gt;
    &lt;svg class=&quot;octicon octicon-zap&quot; viewBox=&quot;0 0 10 16&quot; version=&quot;1.1&quot; width=&quot;10&quot; height=&quot;16&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M10 7H6l3-7-9 9h4l-3 7 9-9z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;
    &lt;strong&gt;Important: &lt;/strong&gt;Pay attention! It&amp;#8217;s important.
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Typing &lt;code&gt;&amp;gt; Tip: This is my tip.&lt;/code&gt; will render this:
&lt;div class=&quot;flash flash-success&quot;&gt;
    &lt;svg class=&quot;octicon octicon-checklist&quot; viewBox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; width=&quot;16&quot; height=&quot;16&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M16 8.5l-6 6-3-3L8.5 10l1.5 1.5L14.5 7 16 8.5zM5.7 12.2l.8.8H2c-.55 0-1-.45-1-1V3c0-.55.45-1 1-1h7c.55 0 1 .45 1 1v6.5l-.8-.8c-.39-.39-1.03-.39-1.42 0L5.7 10.8a.996.996 0 000 1.41v-.01zM4 4h5V3H4v1zm0 2h5V5H4v1zm0 2h3V7H4v1zM3 9H2v1h1V9zm0-2H2v1h1V7zm0-2H2v1h1V5zm0-2H2v1h1V3z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;
    &lt;strong&gt;Tip: &lt;/strong&gt;This is my tip.
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Typing &lt;code&gt;&amp;gt; Note: Take note of this.&lt;/code&gt; will render this:
&lt;div class=&quot;flash&quot;&gt;
    &lt;svg class=&quot;octicon octicon-info&quot; viewBox=&quot;0 0 14 16&quot; version=&quot;1.1&quot; width=&quot;14&quot; height=&quot;16&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M6.3 5.69a.942.942 0 01-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 01-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;
    &lt;strong&gt;Note: &lt;/strong&gt;Take note of this.
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Typing &lt;code&gt;&amp;gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine.&lt;/code&gt; will render in the docs:
&lt;div class=&quot;flash&quot;&gt;
    &lt;svg class=&quot;octicon octicon-info octicon octicon-info&quot; viewBox=&quot;0 0 14 16&quot; version=&quot;1.1&quot; width=&quot;14&quot; height=&quot;16&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M6.3 5.69a.942.942 0 01-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 01-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;
    &lt;strong&gt;Note: &lt;/strong&gt;A doc link to &lt;a href=&quot;https://www.fast.ai/&quot;&gt;an example website: fast.ai&lt;/a&gt; should also work fine.
&lt;/div&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Footnotes&quot;&gt;Footnotes&lt;a class=&quot;anchor-link&quot; href=&quot;#Footnotes&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;You can have footnotes in notebooks, however the syntax is different compared to markdown documents. &lt;a href=&quot;https://github.com/fastai/fastpages/blob/master/_fastpages_docs/NOTEBOOK_FOOTNOTES.md&quot;&gt;This guide provides more detail about this syntax&lt;/a&gt;, which looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;For example, here is a footnote {% fn 1 %}.
And another {% fn 2 %}
{{ 'This is the footnote.' | fndetail: 1 }}
{{ 'This is the other footnote. You can even have a [link](www.github.com)!' | fndetail: 2 }}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For example, here is a footnote &lt;sup id=&quot;fnref-1&quot; class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn-1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;And another &lt;sup id=&quot;fnref-2&quot; class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn-2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;footnotes&quot;&gt;&lt;p id=&quot;fn-1&quot;&gt;1. This is the footnote.&lt;a href=&quot;#fnref-1&quot; class=&quot;footnote footnotes&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;footnotes&quot;&gt;&lt;p id=&quot;fn-2&quot;&gt;2. This is the other footnote. You can even have a &lt;a href=&quot;www.github.com&quot;&gt;link&lt;/a&gt;!&lt;a href=&quot;#fnref-2&quot; class=&quot;footnote footnotes&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://jayesh0vasudeva.github.io/Learning-Iteratively/images/chart-preview.png" /><media:content medium="image" url="https://jayesh0vasudeva.github.io/Learning-Iteratively/images/chart-preview.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>